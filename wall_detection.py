# -*- coding: utf-8 -*-
"""
Created on Tue Jan 31 10:37:37 2023
@author: Tejas Rao
"""

from fractions import Fraction
from scipy.odr import * 
import numpy as np 
import cv2
import math 
import matplotlib.pyplot as plt


# Defining Helper funcitons
class wall_detection():

    def __init__(self, lidar_data, robotX, robotY ,robotTheta):
      self.lidar_data = lidar_data
      self.robotX = robotX
      self.robotY = robotY
      self.robotTheta = robotTheta
      self.LidarPoints = []
      self.epsilon = 0.1
      self.Min_SeedSeg_len = 5
      self.Min_PTS_LS = 4
      self.Delta = 1
      self.Num_Pts= len(lidar_data)
      self.Gmax = 1
      self.Min_LS_len = 0.4
      self.Min_distp2p = 0.2
      self.sub_sample_lidar(sub_sample_rate=3)      
      self.lidar_data2coord()
      self.line_segments = []
      self.break_point_ind = 0
      self.angle_threshold = 5 * math.pi / 180
      self.dist_threshold = 0.05
    
    
    def detected_walls(self):
        
        break_point_ind = self.break_point_ind
        while break_point_ind < self.Num_Pts - self.Min_PTS_LS:
            seed_ind = self.seed_segment_detection(break_point_ind)
            #print('seed_idn ', seed_ind)
            if not seed_ind:
                break_point_ind += 1
                #print('break_point_ind - no seed', break_point_ind)
                continue
            (i, j) = seed_ind
            grown_seed_segment =self.seed_segment_growing((i, j), 0)
            bp_ind = grown_seed_segment[3]
            if bp_ind == ():
                break_point_ind = j + 1
            else:
                break_point_ind = bp_ind
            
            #
            #print('break_point_ind', break_point_ind)
            #print(grown_seed_segment)
            
        self.merge_LS_naive()   
            
        return self.line_segments
    
    
    def merge_LS_naive(self):
        
        ##### Pseudo Code #####
        # start loop with a ls 
        #if slope visited -> continue    
        # start loop with ls after current ls 
        #if slope visited -> continue    
        # If m1 == m2 -> check 4 points slopes
        # if  slope - mean of slopes  < self.slope_threshold -> refit line with those lidar points mark the point as visited 
        visited = [False for i in range(len(self.line_segments))]
        merged_line_segments = []
        for i in range(len(self.line_segments)-1):
            if visited[i] == True:
                continue
            p11, p12 = self.line_segments[i]
            print(p11, p12)
            
            for j in range(i+1, len(self.line_segments)):
                print('--------------------------')
                print('i, j', i, j)
                if visited[j]:
                    continue
                
                visited[i] = True
                
                p21, p22 = self.line_segments[j]
                print('p11, p12',p11, p12)
                print('p21, p22',p21, p22)
                
 
                m1, c1 = self.points_2line(p11, p12)
                m2, c2 = self.points_2line(p21, p22)
                
                l1 = self.line_tf_SI2G(m1, c1)
                l2 = self.line_tf_SI2G(m2, c2)
                
                d1 = self.dist_p2l([0,0], l1)
                d2 = self.dist_p2l([0,0], l2)
                
                (y1, x1) = self.projection_point2line([0, 0], m1, c1)
                (y2, x2) = self.projection_point2line([0, 0], m2, c2)
                
                t1 = math.atan2(y1, x1)
                if t1 < 0: 
                    t1 = 2*math.pi + t1
                
                t2 = math.atan2(y2, x2)
                if t2 < 0: 
                    t2 = 2*math.pi + t2
                
                delta_t = min(abs(t1-t2), abs(2 *math.pi - abs(t1-t2)))
                
                r_mean = (d1 + d2)/2
                dist_perc = max(abs(d1-r_mean),abs(d2-r_mean)) / r_mean
                
                print('delta_t', delta_t)
                print('d1, d2, dist_threshold' ,d1, d2, dist_perc)
                
                
                if delta_t < self.angle_threshold and dist_perc < self.dist_threshold: 
                    
                    visited[j] = True 
                    
                    d1 = self.dist_p2p(p11, p21)
                    d2 = self.dist_p2p(p11, p22)
                    
                    if d1 > d2:
                        p11 = p21
                    else:
                        p12 = p22
                else:                    
                    pass
            merged_line_segments.append([p11, p12])
        
        
        self.line_segments = merged_line_segments
                
    def dist_p2p(self, p1, p2):
    
      x = p1[0] - p2[0]
      y = p1[1] - p2[1]
    
      return math.sqrt(x ** 2 + y ** 2)
    
    
    def dist_p2l(self, p, l):
    
      A, B, C = l
      x = p[0]
      y = p[1]
      d = abs(A*x + B*y + C) / (math.sqrt(A**2 + B**2 ))
      
      return d 
    
    # Slope intercept form
    def line_extract2points(self, m, c, p1, p2):
      
      x1 = p1[0]
      y1 = m* x1 + c
      x2 = p2[0]
      y2 = m*x2 + c
      
      
      
      return ((x1, y1), (x2, y2))
    

    def line_tf_G2SI(self, A, B, C):
    
      m = -A/B
      c = -C/B
      return m, c
    

    def line_tf_SI2G(self, m, c):

        A, B, C = -m, 1, -c
    
        if A < 0:
            A, B, C = -A, -B, -C
      
        den_a = Fraction(A).limit_denominator(1000).as_integer_ratio()[1]
        den_c = Fraction(C).limit_denominator(1000).as_integer_ratio()[1]
        
        gcd = np.gcd(den_a, den_c)
        lcm = den_a * den_c / gcd
        
        A = A * lcm
        B = B * lcm
        C = C * lcm 

        return A, B, C
  
    def line_intersect_general(self, params1, params2):
    
        a1, b1, c1 = params1
        a2, b2, c2 = params2
        
        # check if lines arent parallel
        
        if a1/a2 == b1/b2 and a1/a2 != c1/c2:
          return None
        
        else:
        
          x = (c1 * b2 - b1 * c2) / (b1 * a2 - a1 * b2)
          y = (a1 *c2 - a2 * c1) / (b1 *a2 - a1 * b2)
        
          return x, y
    
    def points_2line(self, point1, point2):
        x1,y1 = point1    
        x2, y2 = point2       
        if x1 == x2:
          pass  
        else:
          m = (y2- y1)/ (x2 - x1)
          c = y2 -m * x2      
        return m, c
    
    def projection_point2line(self, point, m, c):
        
        x, y = point 
        if m != 0:
          m2 = -1/m 
          c2 = y - m2 * x
        
          intersection_x = - (c - c2) / (m - m2)
          intersection_y = m2 * intersection_x  + c2 
        else:
          intersection_x = x 
          intersection_y = c
        
        return intersection_x, intersection_y
    
    def sub_sample_lidar(self, sub_sample_rate=10):
        
        i = 0
        sub_lidar = []
        while i < len(self.lidar_data):
            sub_lidar.append(self.lidar_data[i])
            i += sub_sample_rate
        
        self.lidar_data = sub_lidar
        self.Num_Pts = len(self.lidar_data)
    
    def lidar_data2coord(self):
        
        for id, point in enumerate(self.lidar_data):
       
         theta, r = point # theta starts from zero wrt robot
       
         angle = theta - math.pi / 2 + self.robotTheta 
         x_coord = self.robotX + r * math.cos(angle)
         y_coord = self.robotY + r * math.sin(angle)
       
         coord = [x_coord, y_coord]
         plt.scatter(x_coord, y_coord, c='red')
         self.LidarPoints.append([coord, angle])
          
      # Define a linear function to fit our data with 
    
    def linear_func(self, p, x):
    
        m, c = p 
        return m * x + c
    
    def odr_fit(self, laser_points):
        
        x = np.array([i[0][0] for i in laser_points])
        y = np.array([i[0][1] for i in laser_points])
        
        linear_model = Model(self.linear_func)
        
        data = RealData(x, y)
        odr_model = ODR(data, linear_model, beta0=[0., 0.])
        
        out=  odr_model.run()
        
        m, c = out.beta
        
        return m, c
        
    def predictPoint(self, line_params, sensed_point):
        robotPos = (self.robotX, self.robotY)
        m, c = self.points_2line(robotPos, sensed_point)
        params1 = self.line_tf_SI2G(m, c)
        predx, predy = self.line_intersect_general(params1, line_params)
        return predx, predy 
        
    def seed_segment_detection(self,break_point_ind):

        #print('seed Segment detection')
        self.Num_Pts = max(0, self.Num_Pts)
        self.seed_segments = []
        
        for i in range(break_point_ind, (self.Num_Pts - self.Min_PTS_LS)):
            Flag = True 
            j  = i + self.Min_SeedSeg_len
            m, c = self.odr_fit(self.LidarPoints[i:j])
  
            line_params= self.line_tf_SI2G(m, c)
            p1, p2 = [], []
            #print('i, j', i, j)
            for k in range(i, j):
                #print('k', k, len(self.lidar_data))
                d1 = self.dist_p2l(self.LidarPoints[k][0], line_params)
                if d1 > self.epsilon:
                  #print('a')
                  Flag = False
                  break
                
                
                predicted_point = self.predictPoint(line_params, self.LidarPoints[k][0])
                d2 = self.dist_p2p(predicted_point, self.LidarPoints[k][0])

                p2 = predicted_point 
                if k > i: 
                  d3 = self.dist_p2p(p1, p2)

                  if d3 > self.Min_distp2p:
                    #print('d3 ', d3)
                    Flag = False
                    #print('b')
                    break
                
                p1 = p2

                if d2 > self.Delta:
                  Flag = False
                  #print('c')
                  break
            if Flag == True:
                self.line_params = line_params 
                return (i, j)
        return None

    def seed_segment_growing(self, indices, break_point):
    
        
        #print('seed segment growing')
        line_eq = self.line_params
        i, j = indices 
      
        # Beginnning and Final Points of the line segments 
        
        PB, PF = max(break_point, i-1), min(j, len(self.LidarPoints) - 1)
        
        
        while True:
            #print('seed seg growing PF', PF)
            if self.dist_p2l(self.LidarPoints[PF][0], line_eq) > self.epsilon:
                PF -= 1
                break

            m, c = self.odr_fit(self.LidarPoints[PB+1:PF])
            line_eq = self.line_tf_SI2G(m, c)
            Point = self.LidarPoints[PF][0]
        
            PF = PF +1 
            if PF > self.Num_Pts -1:
                PF -= 1
                break
            NextPoint = self.LidarPoints[PF][0]
            if self.dist_p2p(Point, NextPoint) > self.Gmax:
                PF -= 1
                break 
       
        while True:
            if self.dist_p2l(self.LidarPoints[PB][0], line_eq) > self.epsilon:
                PB += 1
                break
        
            m, c = self.odr_fit(self.LidarPoints[PB:PF])
            line_eq = self.line_tf_SI2G(m, c)
            Point = self.LidarPoints[PB][0]
            
            PB -= 1
            if PB < 0:
                PB += 1 

                break
            NextPoint = self.LidarPoints[PB][0]
            if self.dist_p2p(Point, NextPoint) > self.Gmax:
                break
            
        #print('PB, PF ', PB, PF)
        Len_LS = self.dist_p2p(self.LidarPoints[PB][0],self.LidarPoints[PF][0])
        Num_P = len(self.LidarPoints[PB:PF+1])

        #print('Len LS', Len_LS)
        #print("Num_P ", Num_P)
        
        if (Len_LS >= self.Min_LS_len) and (Num_P >= self.Min_PTS_LS):
            
            m, c = self.line_tf_G2SI(line_eq[0], line_eq[1], line_eq[2])
            
# =============================================================================
#             print('detected line m, c',m, c)
#             print('self.LidarPoints[PB][0]', self.LidarPoints[PB][0])
#             print('self.LidarPoints[PF][0]', self.LidarPoints[PF][0])
#             
# =============================================================================
            ext_point1 = self.projection_point2line(self.LidarPoints[PB][0], m, c)
            ext_point2 = self.projection_point2line(self.LidarPoints[PF][0], m, c)
            
            if self.dist_p2p(ext_point1, ext_point2) < self.Min_LS_len:
                [(), (), (), (), (), (), ()]
            
            two_points = (ext_point1, ext_point2)
            
            self.line_segments.append(two_points)
            return [self.LidarPoints[PB:PF+1], two_points, (self.LidarPoints[PB+1][0], self.LidarPoints[PF-1][0]), PF, line_eq, (m, c)]
        else:

            return  [(), (), (), (), (), (), ()]
          
          
def wall_2_lidar(wallx, wally, robotX, robotY, robotTheta):
    
    lidar_data = []
    for x, y in zip(wallx, wally):
        
        rel_x = x - robotX
        rel_y = y - robotY
        theta = math.atan2(rel_y, rel_x) - robotTheta +math.pi/2
        r = math.sqrt( rel_y ** 2 + rel_x ** 2)
        
        lidar_data.append([r, theta])
    return lidar_data    
    
def plot_line_segments(points):
    
    for point_pair in points:
        #print(point_pair)
        p1, p2 = point_pair
        #print(('p1, p2'))
        #print(p1)
        plt.plot((p1[0], p2[0]), (p1[1], p2[1]), 'black')
    

if __name__ ==  "__main__":
    
    robotPos = [0, 0, 0]
    robotX, robotY, robotTheta = robotPos 
    num_points = 10
    wallx1 = np.zeros([1, num_points])+ 1 + np.random.normal(0,0.005,num_points) + 1
    wallx1 = wallx1.squeeze()
    wallx2 = np.flip(np.linspace(-4, 1, num_points))
    wallx3 = np.zeros([1, num_points])+ 1 + np.random.normal(0,0.005,num_points) - 4
    wallx3 = wallx3.squeeze()
    wallx4 = np.linspace(-2, 1, num_points)
# =============================================================================
#     
#     print(wallx1.shape)
#     print(wallx2.shape)
#     print(wallx3.shape)
#     print(wallx4.shape)
# 
# =============================================================================
    
    #wally[-1] = 3
    wally1 = np.linspace(-2, 5, num_points)
    wally2 = np.zeros([1, num_points])+ 5 + np.random.normal(0,0.005,num_points) + 1
    wally2 = wally2.squeeze()
    wally3 = np.flip(np.linspace(-2, 5, num_points))
    wally4 = np.zeros([1, num_points])+ 0 + np.random.normal(0,0.005,num_points) - 3
    wally4 = wally4.squeeze()
        
# =============================================================================
#                     
#     print(wally1.shape)
#     print(wally2.shape)
#     print(wally3.shape)
#     print(wally4.shape)
#     
# =============================================================================
    
    wallx = np.concatenate((wallx1, wallx2, wallx3, wallx4))
    wally = np.concatenate((wally1, wally2, wally3, wally4))
    
# =============================================================================
#     plt.xlim((-7,7))
#     plt.ylim((-7, 7))
#     plt.scatter(wallx, wally)
# =============================================================================
    
    
    #  
    lidar_data  =[[-3.1415927410125732, 0.7900000214576721], [-3.1361100310459733, 0.7900000214576721], [-3.1306273210793734, 0.7900000214576721], [-3.1251446111127734, 0.7940000295639038], [-3.1196619011461735, 0.7940000295639038], [-3.1141791911795735, 0.7960000038146973], [-3.1086964812129736, 0.7940000295639038], [-3.1032137712463737, 0.7919999957084656], [-3.0977310612797737, 0.7919999957084656], [-3.0922483513131738, 0.7919999957084656], [-3.086765641346574, 0.7919999957084656], [-3.081282931379974, 0.7940000295639038], [-3.075800221413374, 0.7960000038146973], [-3.070317511446774, 0.800000011920929], [-3.064834801480174, 0.800000011920929], [-3.059352091513574, 0.8040000200271606], [-3.053869381546974, 0.8100000023841858], [-3.0483866715803742, 0.8180000185966492], [-3.0429039616137743, 0.8360000252723694], [-3.0209731217473745, 3.864000082015991], [-3.0154904117807746, 3.864000082015991], [-3.0100077018141747, 3.864000082015991], [-3.0045249918475747, 3.864000082015991], [-2.9990422818809748, 3.864000082015991], [-2.993559571914375, 3.864000082015991], [-2.988076861947775, 3.864000082015991], [-2.982594151981175, 3.864000082015991], [-2.977111442014575, 3.864000082015991], [-2.971628732047975, 3.864000082015991], [-2.966146022081375, 3.868000030517578], [-2.960663312114775, 3.871999979019165], [-2.9551806021481752, 3.875999927520752], [-2.9496978921815753, 3.875999927520752], [-2.9442151822149754, 3.884000062942505], [-2.9387324722483754, 3.888000011444092], [-2.9332497622817755, 3.8919999599456787], [-2.9277670523151755, 3.888000011444092], [-2.9222843423485756, 3.8239998817443848], [-2.9168016323819757, 3.7720000743865967], [-2.9113189224153757, 3.7799999713897705], [-2.9058362124487758, 3.7839999198913574], [-2.900353502482176, 3.7880001068115234], [-2.894870792515576, 3.7960000038146973], [-2.889388082548976, 3.7960000038146973], [-2.883905372582376, 3.799999952316284], [-2.878422662615776, 3.803999900817871], [-2.872939952649176, 3.808000087738037], [-2.867457242682576, 3.815999984741211], [-2.8619745327159762, 3.819999933242798], [-2.8564918227493763, 3.8320000171661377], [-2.8510091127827764, 3.8399999141693115], [-2.8455264028161764, 3.8399999141693115], [-2.8400436928495765, 3.859999895095825], [-2.8345609828829765, 3.859999895095825], [-2.8290782729163766, 3.8559999465942383], [-2.779733883216977, 4.059999942779541], [-2.774251173250377, 4.059999942779541], [-2.7687684632837772, 4.059999942779541], [-2.7632857533171773, 4.059999942779541], [-2.7578030433505774, 4.052000045776367], [-2.7523203333839774, 4.059999942779541], [-2.7468376234173775, 4.072000026702881], [-2.7413549134507775, 4.079999923706055], [-2.7358722034841776, 4.0879998207092285], [-2.7303894935175776, 4.104000091552734], [-2.7249067835509777, 4.119999885559082], [-2.7194240735843778, 4.127999782562256], [-2.713941363617778, 4.136000156402588], [-2.708458653651178, 4.1519999504089355], [-2.702975943684578, 4.168000221252441], [-2.697493233717978, 4.176000118255615], [-2.692010523751378, 4.184000015258789], [-2.686527813784778, 4.191999912261963], [-2.681045103818178, 4.199999809265137], [-2.6755623938515782, 4.216000080108643], [-2.6700796838849783, 4.223999977111816], [-2.6645969739183784, 4.23199987411499], [-2.6591142639517784, 4.271999835968018], [-2.6536315539851785, 4.248000144958496], [-2.6481488440185785, 4.168000221252441], [-2.6426661340519786, 4.127999782562256], [-2.6371834240853786, 4.104000091552734], [-2.6317007141187787, 4.064000129699707], [-2.6262180041521788, 4.01200008392334], [-2.620735294185579, 3.9719998836517334], [-2.615252584218979, 3.927999973297119], [-2.609769874252379, 3.888000011444092], [-2.604287164285779, 3.8480000495910645], [-2.149222237057984, 1.8339999914169312], [-2.143739527091384, 1.8339999914169312], [-2.138256817124784, 1.8339999914169312], [-2.132774107158184, 1.8339999914169312], [-2.127291397191584, 1.8559999465942383], [-2.121808687224984, 1.8559999465942383], [-2.1163259772583842, 1.8559999465942383], [-2.1108432672917843, 1.8760000467300415], [-2.1053605573251843, 1.8760000467300415], [-2.0998778473585844, 1.8980000019073486], [-2.0943951373919845, 1.8980000019073486], [-2.0889124274253845, 1.9160000085830688], [-2.0834297174587846, 1.9279999732971191], [-2.0779470074921846, 1.9459999799728394], [-2.0724642975255847, 1.965999960899353], [-2.0669815875589848, 1.9839999675750732], [-2.061498877592385, 2.003999948501587], [-2.056016167625785, 2.0239999294281006], [-2.050533457659185, 2.0399999618530273], [-2.045050747692585, 2.055999994277954], [-2.039568037725985, 2.059999942779541], [-2.034085327759385, 2.059999942779541], [-2.028602617792785, 2.059999942779541], [-2.0231199078261852, 2.055999994277954], [-2.0176371978595853, 2.055999994277954], [-2.0121544878929853, 2.0480000972747803], [-2.0066717779263854, 2.0439999103546143], [-2.0011890679597855, 2.0420000553131104], [-1.9957063579931855, 2.0380001068115234], [-1.9902236480265856, 2.0320000648498535], [-1.9847409380599856, 2.0260000228881836], [-1.9792582280933857, 2.0179998874664307], [-1.9737755181267858, 2.0139999389648438], [-1.9682928081601858, 2.007999897003174], [-1.9628100981935859, 2.009999990463257], [-1.957327388226986, 2.0320000648498535], [-1.951844678260386, 2.0360000133514404], [-1.946361968293786, 2.0380001068115234], [-1.940879258327186, 2.0380001068115234], [-1.9353965483605862, 2.049999952316284], [-1.9299138383939862, 2.0460000038146973], [-1.9244311284273863, 2.0439999103546143], [-1.9189484184607863, 2.0380001068115234], [-1.9134657084941864, 2.0339999198913574], [-1.9079829985275865, 2.0299999713897705], [-1.9025002885609865, 2.0260000228881836], [-1.8970175785943866, 2.0239999294281006], [-1.8915348686277866, 2.0179998874664307], [-1.8860521586611867, 2.0139999389648438], [-1.8805694486945868, 2.007999897003174], [-1.8750867387279868, 2.002000093460083], [-1.8696040287613869, 1.996000051498413], [-1.864121318794787, 1.9900000095367432], [-1.858638608828187, 1.9880000352859497], [-1.853155898861587, 1.9859999418258667], [-1.847673188894987, 1.9819999933242798], [-1.8421904789283872, 1.9780000448226929], [-1.8367077689617872, 1.972000002861023], [-1.8312250589951873, 1.9700000286102295], [-1.8257423490285873, 1.9700000286102295], [-1.8202596390619874, 1.965999960899353], [-1.8147769290953875, 1.9620000123977661], [-1.8092942191287875, 1.9600000381469727], [-1.8038115091621876, 1.9579999446868896], [-1.7983287991955876, 1.9539999961853027], [-1.7928460892289877, 1.9500000476837158], [-1.7873633792623878, 1.9459999799728394], [-1.7818806692957878, 1.9420000314712524], [-1.7763979593291879, 1.940000057220459], [-1.770915249362588, 1.9359999895095825], [-1.765432539395988, 1.9359999895095825], [-1.759949829429388, 1.934000015258789], [-1.754467119462788, 1.934000015258789], [-1.7489844094961882, 1.9299999475479126], [-1.7435016995295882, 1.9299999475479126], [-1.7380189895629883, 1.9279999732971191], [-1.7325362795963883, 1.9279999732971191], [-1.7270535696297884, 1.9259999990463257], [-1.7215708596631885, 1.9240000247955322], [-1.7160881496965885, 1.9220000505447388], [-1.7106054397299886, 1.9199999570846558], [-1.7051227297633886, 1.9160000085830688], [-1.6996400197967887, 1.9160000085830688], [-1.6941573098301888, 1.9140000343322754], [-1.6886745998635888, 1.909999966621399], [-1.6831918898969889, 1.906000018119812], [-1.677709179930389, 1.9040000438690186], [-1.672226469963789, 1.9040000438690186], [-1.666743759997189, 1.9019999504089355], [-1.661261050030589, 1.8980000019073486], [-1.6557783400639892, 1.8980000019073486], [-1.6502956300973892, 1.8960000276565552], [-1.6448129201307893, 1.8960000276565552], [-1.6393302101641893, 1.8940000534057617], [-1.6338475001975894, 1.8940000534057617], [-1.6283647902309895, 1.8919999599456787], [-1.6228820802643895, 1.8919999599456787], [-1.6173993702977896, 1.8919999599456787], [-1.6119166603311896, 1.8919999599456787], [-1.6064339503645897, 1.8919999599456787], [-1.6009512403979897, 1.8899999856948853], [-1.5954685304313898, 1.8880000114440918], [-1.5899858204647899, 1.8880000114440918], [-1.58450311049819, 1.8880000114440918], [-1.57902040053159, 1.8880000114440918], [-1.57353769056499, 1.8880000114440918], [-1.56805498059839, 1.8860000371932983], [-1.5625722706317902, 1.8860000371932983], [-1.5570895606651902, 1.8860000371932983], [-1.5516068506985903, 1.8839999437332153], [-1.5461241407319903, 1.8860000371932983], [-1.5406414307653904, 1.8899999856948853], [-1.5351587207987905, 1.9019999504089355], [-1.5296760108321905, 1.9019999504089355], [-1.5241933008655906, 1.9600000381469727], [-1.5187105908989906, 1.9600000381469727], [-1.5132278809323907, 1.9140000343322754], [-1.5077451709657907, 1.8940000534057617], [-1.5022624609991908, 1.8940000534057617], [-1.4967797510325909, 1.9160000085830688], [-1.491297041065991, 1.9320000410079956], [-1.485814331099391, 1.8580000400543213], [-1.480331621132791, 1.871999979019165], [-1.474848911166191, 1.871999979019165], [-1.4693662011995912, 1.8839999437332153], [-1.4638834912329912, 1.8839999437332153], [-1.4584007812663913, 1.8760000467300415], [-1.4529180712997913, 1.8760000467300415], [-1.4474353613331914, 1.8839999437332153], [-1.4419526513665915, 1.8839999437332153], [-1.4364699413999915, 1.8839999437332153], [-1.4309872314333916, 1.8860000371932983], [-1.4255045214667916, 1.8880000114440918], [-1.4200218115001917, 1.8860000371932983], [-1.4145391015335917, 1.8880000114440918], [-1.4090563915669918, 1.8860000371932983], [-1.4035736816003919, 1.8860000371932983], [-1.398090971633792, 1.8899999856948853], [-1.392608261667192, 1.8899999856948853], [-1.387125551700592, 1.8899999856948853], [-1.381642841733992, 1.8940000534057617], [-1.3761601317673922, 1.8960000276565552], [-1.3706774218007922, 1.8980000019073486], [-1.3651947118341923, 1.8980000019073486], [-1.3597120018675923, 1.8980000019073486], [-1.3542292919009924, 1.899999976158142], [-1.3487465819343925, 1.9019999504089355], [-1.3432638719677925, 1.8459999561309814], [-1.3377811620011926, 1.8459999561309814], [-1.3322984520345926, 1.8420000076293945], [-1.3268157420679927, 1.8420000076293945], [-1.3213330321013927, 1.7979999780654907], [-1.3158503221347928, 1.75], [-1.3103676121681929, 1.7039999961853027], [-1.304884902201593, 1.6679999828338623], [-1.299402192234993, 1.6319999694824219], [-1.293919482268393, 1.5959999561309814], [-1.288436772301793, 1.5579999685287476], [-1.2829540623351932, 1.5240000486373901], [-1.2774713523685932, 1.4919999837875366], [-1.2719886424019933, 1.4620000123977661], [-1.2665059324353933, 1.4320000410079956], [-1.2610232224687934, 1.399999976158142], [-1.2555405125021935, 1.3739999532699585], [-1.2500578025355935, 1.3480000495910645], [-1.2445750925689936, 1.3200000524520874], [-1.2390923826023936, 1.2940000295639038], [-1.2281269626691937, 0.6019999980926514], [-1.2226442527025938, 0.6019999980926514], [-1.2171615427359939, 0.6019999980926514], [-1.211678832769394, 0.6019999980926514], [-1.195230702869594, 0.5540000200271606], [-1.1897479929029942, 0.5540000200271606], [-1.1842652829363942, 0.5540000200271606], [-1.1787825729697943, 0.5540000200271606], [-1.1732998630031943, 0.5460000038146973], [-1.1678171530365944, 0.5460000038146973], [-1.1623344430699944, 0.5379999876022339], [-1.1568517331033945, 0.5260000228881836], [-1.0033358540385962, 0.34200000762939453], [-0.9978531440719962, 0.34200000762939453], [-0.9923704341053963, 0.34200000762939453], [-0.9868877241387963, 0.34200000762939453], [-0.9814050141721964, 0.33799999952316284], [-0.9759223042055964, 0.33799999952316284], [-0.9704395942389965, 0.33799999952316284], [-0.9649568842723966, 0.335999995470047], [-0.9594741743057966, 0.33399999141693115], [-0.9539914643391967, 0.3310000002384186], [-0.9485087543725967, 0.3269999921321869], [-0.9430260444059968, 0.32199999690055847], [-0.8662681048735976, 0.2770000100135803], [-0.8607853949069977, 0.2770000100135803], [-0.8553026849403977, 0.2770000100135803], [-0.8498199749737978, 0.2770000100135803], [-0.8443372650071979, 0.27399998903274536], [-0.8388545550405979, 0.27399998903274536], [-0.833371845073998, 0.27399998903274536], [-0.6524424161761999, 0.21799999475479126], [-0.6469597062096, 0.21799999475479126], [-0.641476996243, 0.21799999475479126], [-0.6359942862764001, 0.21799999475479126], [-0.6305115763098001, 0.2160000056028366], [-0.6250288663432002, 0.2160000056028366], [-0.6195461563766003, 0.2160000056028366], [-0.6140634464100003, 0.21299999952316284], [-0.6085807364434004, 0.21299999952316284], [-0.6030980264768004, 0.21299999952316284], [-0.5976153165102005, 0.210999995470047], [-0.5921326065436006, 0.210999995470047], [-0.5866498965770006, 0.210999995470047], [-0.5811671866104007, 0.20999999344348907], [-0.5756844766438007, 0.20999999344348907], [-0.5702017666772008, 0.20900000631809235], [-0.5647190567106009, 0.20800000429153442], [-0.5592363467440009, 0.20800000429153442], [-0.553753636777401, 0.20600000023841858], [-0.548270926810801, 0.20600000023841858], [-0.48247840721160173, 0.4180000126361847], [-0.4769956972450018, 0.4180000126361847], [-0.47151298727840185, 0.4180000126361847], [-0.4660302773118019, 0.4180000126361847], [-0.46054756734520197, 0.4169999957084656], [-0.45506485737860203, 0.41499999165534973], [-0.4495821474120021, 0.414000004529953], [-0.44409943744540215, 0.4129999876022339], [-0.4386167274788022, 0.41200000047683716], [-0.43313401751220226, 0.4099999964237213], [-0.4276513075456023, 0.4090000092983246], [-0.4221685975790024, 0.40799999237060547], [-0.41668588761240244, 0.40700000524520874], [-0.4112031776458025, 0.4059999883174896], [-0.40572046767920256, 0.4050000011920929], [-0.4002377577126026, 0.40400001406669617], [-0.3947550477460027, 0.40299999713897705], [-0.38927233777940273, 0.4020000100135803], [-0.3837896278128028, 0.4009999930858612], [-0.37830691784620285, 0.4000000059604645], [-0.3728242078796029, 0.39899998903274536], [-0.36734149791300297, 0.3970000147819519], [-0.361858787946403, 0.3970000147819519], [-0.3563760779798031, 0.3959999978542328], [-0.35089336801320314, 0.39500001072883606], [-0.3454106580466032, 0.39399999380111694], [-0.33992794808000326, 0.3930000066757202], [-0.3344452381134033, 0.3919999897480011], [-0.3289625281468034, 0.39100000262260437], [-0.32347981818020344, 0.39100000262260437], [-0.3179971082136035, 0.3889999985694885], [-0.31251439824700356, 0.3889999985694885], [-0.3070316882804036, 0.3880000114440918], [-0.3015489783138037, 0.3880000114440918], [-0.29606626834720373, 0.3869999945163727], [-0.2905835583806038, 0.38600000739097595], [-0.28510084841400385, 0.38499999046325684], [-0.2796181384474039, 0.3840000033378601], [-0.27413542848080397, 0.3840000033378601], [-0.268652718514204, 0.382999986410141], [-0.2631700085476041, 0.38199999928474426], [-0.25768729858100414, 0.38199999928474426], [-0.2522045886144042, 0.38100001215934753], [-0.24672187864780426, 0.3799999952316284], [-0.24123916868120432, 0.3799999952316284], [-0.23575645871460438, 0.3790000081062317], [-0.23027374874800444, 0.3779999911785126], [-0.2247910387814045, 0.3779999911785126], [-0.21930832881480455, 0.37700000405311584], [-0.2138256188482046, 0.37599998712539673], [-0.20834290888160467, 0.37599998712539673], [-0.20286019891500473, 0.375], [-0.1973774889484048, 0.375], [-0.19189477898180485, 0.375], [-0.1864120690152049, 0.37400001287460327], [-0.18092935904860497, 0.37400001287460327], [-0.17544664908200502, 0.37400001287460327], [-0.16996393911540508, 0.37299999594688416], [-0.16448122914880514, 0.37299999594688416], [-0.1589985191822052, 0.3720000088214874], [-0.15351580921560526, 0.3720000088214874], [-0.14803309924900532, 0.3709999918937683], [-0.14255038928240538, 0.3709999918937683], [-0.13706767931580544, 0.3709999918937683], [-0.1315849693492055, 0.3700000047683716], [-0.12610225938260555, 0.3700000047683716], [-0.12061954941600561, 0.36899998784065247], [-0.11513683944940567, 0.36899998784065247], [-0.10965412948280573, 0.36800000071525574], [-0.10417141951620579, 0.36800000071525574], [-0.09868870954960585, 0.36800000071525574], [-0.0932059995830059, 0.36800000071525574], [-0.08772328961640596, 0.367000013589859], [-0.08224057964980602, 0.367000013589859], [-0.07675786968320608, 0.367000013589859], [-0.07127515971660614, 0.367000013589859], [-0.0657924497500062, 0.3659999966621399], [-0.06030973978340626, 0.3659999966621399], [-0.054827029816806316, 0.3659999966621399], [-0.049344319850206375, 0.3659999966621399], [-0.043861609883606434, 0.3659999966621399], [-0.03837889991700649, 0.36500000953674316], [-0.03289618995040655, 0.36500000953674316], [-0.02741347998380661, 0.36500000953674316], [-0.02193077001720667, 0.36500000953674316], [-0.016448060050606728, 0.36500000953674316], [-0.010965350084006786, 0.36500000953674316], [-0.005482640117406845, 0.36500000953674316], [6.984919309616089e-08, 0.36399999260902405], [0.005482779815793037, 0.36399999260902405], [0.010965489782392979, 0.36399999260902405], [0.01644819974899292, 0.36399999260902405], [0.02193090971559286, 0.36399999260902405], [0.027413619682192802, 0.36399999260902405], [0.032896329648792744, 0.36399999260902405], [0.038379039615392685, 0.36399999260902405], [0.043861749581992626, 0.36399999260902405], [0.04934445954859257, 0.36399999260902405], [0.05482716951519251, 0.36399999260902405], [0.06030987948179245, 0.36399999260902405], [0.06579258944839239, 0.36399999260902405], [0.07127529941499233, 0.36399999260902405], [0.07675800938159227, 0.36399999260902405], [0.08224071934819221, 0.36399999260902405], [0.08772342931479216, 0.36399999260902405], [0.0932061392813921, 0.36399999260902405], [0.09868884924799204, 0.36500000953674316], [0.10417155921459198, 0.36500000953674316], [0.10965426918119192, 0.36500000953674316], [0.11513697914779186, 0.36500000953674316], [0.1206196891143918, 0.36500000953674316], [0.12610239908099174, 0.36500000953674316], [0.1315851090475917, 0.36500000953674316], [0.13706781901419163, 0.36500000953674316], [0.14255052898079157, 0.3659999966621399], [0.1480332389473915, 0.3659999966621399], [0.15351594891399145, 0.3659999966621399], [0.1589986588805914, 0.3659999966621399], [0.16448136884719133, 0.367000013589859], [0.16996407881379128, 0.367000013589859], [0.17544678878039122, 0.367000013589859], [0.18092949874699116, 0.367000013589859], [0.1864122087135911, 0.36800000071525574], [0.19189491868019104, 0.36800000071525574], [0.19737762864679098, 0.36800000071525574], [0.20286033861339092, 0.36899998784065247], [0.20834304857999086, 0.36899998784065247], [0.2138257585465908, 0.36899998784065247], [0.21930846851319075, 0.36899998784065247], [0.2247911784797907, 0.3700000047683716], [0.23027388844639063, 0.3700000047683716], [0.23575659841299057, 0.3709999918937683], [0.2412393083795905, 0.3709999918937683], [0.24672201834619045, 0.3709999918937683], [0.2522047283127904, 0.3709999918937683], [0.25768743827939034, 0.3720000088214874], [0.2631701482459903, 0.37299999594688416], [0.2686528582125902, 0.37299999594688416], [0.27413556817919016, 0.37400001287460327], [0.2796182781457901, 0.37400001287460327], [0.28510098811239004, 0.375], [0.29058369807899, 0.375], [0.2960664080455899, 0.37599998712539673], [0.30154911801218987, 0.37599998712539673], [0.3070318279787898, 0.37700000405311584], [0.31251453794538975, 0.37700000405311584], [0.3179972479119897, 0.3779999911785126], [0.32347995787858963, 0.3779999911785126], [0.32896266784518957, 0.3790000081062317], [0.3344453778117895, 0.3799999952316284], [0.33992808777838945, 0.38100001215934753], [0.3454107977449894, 0.38100001215934753], [0.35089350771158934, 0.38199999928474426], [0.3563762176781893, 0.38199999928474426], [0.3618589276447892, 0.38199999928474426], [0.36734163761138916, 0.382999986410141], [0.3728243475779891, 0.3840000033378601], [0.37830705754458904, 0.38499999046325684], [0.383789767511189, 0.38499999046325684], [0.3892724774777889, 0.38600000739097595], [0.39475518744438887, 0.3880000114440918], [0.4002378974109888, 0.3880000114440918], [0.40572060737758875, 0.3889999985694885], [0.4112033173441887, 0.38999998569488525], [0.41668602731078863, 0.38999998569488525], [0.4221687372773886, 0.39100000262260437], [0.4276514472439885, 0.3919999897480011], [0.43313415721058846, 0.3930000066757202], [0.4386168671771884, 0.39399999380111694], [0.44409957714378834, 0.39500001072883606], [0.4495822871103883, 0.3959999978542328], [0.4550649970769882, 0.3970000147819519], [0.46054770704358816, 0.39800000190734863], [0.4660304170101881, 0.39899998903274536], [0.47151312697678804, 0.4000000059604645], [0.476995836943388, 0.4000000059604645], [0.4824785469099879, 0.4020000100135803], [0.48796125687658787, 0.40299999713897705], [0.4934439668431878, 0.40400001406669617], [0.49892667680978775, 0.4050000011920929], [0.5044093867763877, 0.4059999883174896], [0.5098920967429876, 0.40700000524520874], [0.5153748067095876, 0.40799999237060547], [0.5208575166761875, 0.4090000092983246], [0.5263402266427875, 0.41100001335144043], [0.5318229366093874, 0.41200000047683716], [0.5373056465759873, 0.4129999876022339], [0.5427883565425873, 0.414000004529953], [0.5482710665091872, 0.41600000858306885], [0.5537537764757872, 0.4169999957084656], [0.5592364864423871, 0.4189999997615814], [0.564719196408987, 0.41999998688697815], [0.570201906375587, 0.42100000381469727], [0.5756846163421869, 0.4230000078678131], [0.5811673263087869, 0.42399999499320984], [0.5866500362753868, 0.42399999499320984], [0.5921327462419868, 0.4259999990463257], [0.5976154562085867, 0.4269999861717224], [0.6030981661751866, 0.42899999022483826], [0.6085808761417866, 0.4300000071525574], [0.6140635861083865, 0.4320000112056732], [0.6195462960749865, 0.4339999854564667], [0.6250290060415864, 0.4350000023841858], [0.6305117160081863, 0.43700000643730164], [0.6359944259747863, 0.4390000104904175], [0.6414771359413862, 0.4399999976158142], [0.6469598459079862, 0.44200000166893005], [0.6524425558745861, 0.4440000057220459], [0.657925265841186, 0.44600000977516174], [0.663407975807786, 0.4480000138282776], [0.6688906857743859, 0.4480000138282776], [0.6743733957409859, 0.44999998807907104], [0.6798561057075858, 0.45100000500679016], [0.6853388156741858, 0.453000009059906], [0.6908215256407857, 0.45500001311302185], [0.6963042356073856, 0.4569999873638153], [0.7017869455739856, 0.45899999141693115], [0.7072696555405855, 0.460999995470047], [0.7127523655071855, 0.46299999952316284], [0.7182350754737854, 0.4659999907016754], [0.7237177854403853, 0.46799999475479126], [0.7292004954069853, 0.4699999988079071], [0.7346832053735852, 0.47200000286102295], [0.7401659153401852, 0.4749999940395355], [0.7456486253067851, 0.47699999809265137], [0.751131335273385, 0.4790000021457672], [0.756614045239985, 0.48100000619888306], [0.7620967552065849, 0.48399999737739563], [0.7675794651731849, 0.48399999737739563], [0.7730621751397848, 0.4869999885559082], [0.7785448851063848, 0.49000000953674316], [0.7840275950729847, 0.492000013589859], [0.7895103050395846, 0.49399998784065247], [0.7949930150061846, 0.4970000088214874], [0.8004757249727845, 0.5], [0.8059584349393845, 0.503000020980835], [0.8114411449059844, 0.5059999823570251], [0.8169238548725843, 0.5080000162124634], [0.8224065648391843, 0.5120000243186951], [0.8278892748057842, 0.5139999985694885], [0.8333719847723842, 0.515999972820282], [0.8388546947389841, 0.5199999809265137], [0.844337404705584, 0.5239999890327454], [0.849820114672184, 0.5239999890327454], [0.8553028246387839, 0.5260000228881836], [0.8607855346053839, 0.5299999713897705], [0.8662682445719838, 0.5339999794960022], [0.8717509545385838, 0.5379999876022339], [0.8772336645051837, 0.5419999957084656], [0.8827163744717836, 0.5440000295639038], [0.8881990844383836, 0.5479999780654907], [0.8936817944049835, 0.5540000200271606], [0.8991645043715835, 0.5580000281333923], [0.9046472143381834, 0.5600000023841858], [0.9101299243047833, 0.5640000104904175], [0.9156126342713833, 0.5680000185966492], [0.9210953442379832, 0.5720000267028809], [0.9265780542045832, 0.5720000267028809], [0.9320607641711831, 0.578000009059906], [0.937543474137783, 0.5820000171661377], [0.943026184104383, 0.5860000252723694], [0.9485088940709829, 0.5899999737739563], [0.9539916040375829, 0.5960000157356262], [0.9594743140041828, 0.6019999980926514], [0.9649570239707828, 0.6039999723434448], [0.9704397339373827, 0.6079999804496765], [0.9759224439039826, 0.6140000224113464], [0.9814051538705826, 0.6200000047683716], [0.9868878638371825, 0.6259999871253967], [0.9923705738037825, 0.6299999952316284], [0.9978532837703824, 0.6299999952316284], [1.0033359937369823, 0.6359999775886536], [1.0088187037035823, 0.6399999856948853], [1.0143014136701822, 0.6480000019073486], [1.0197841236367822, 0.6539999842643738], [1.025266833603382, 0.6579999923706055], [1.030749543569982, 0.6639999747276306], [1.036232253536582, 0.6700000166893005], [1.041714963503182, 0.6759999990463257], [1.0471976734697819, 0.6840000152587891], [1.0526803834363818, 0.6880000233650208], [1.0581630934029818, 0.6959999799728394], [1.0636458033695817, 0.6959999799728394], [1.0691285133361816, 0.7020000219345093], [1.0746112233027816, 0.7120000123977661], [1.0800939332693815, 0.7179999947547913], [1.0855766432359815, 0.7239999771118164], [1.0910593532025814, 0.7319999933242798], [1.0965420631691813, 0.7419999837875366], [1.1020247731357813, 0.75], [1.1075074831023812, 0.7559999823570251], [1.1129901930689812, 0.7639999985694885], [1.1184729030355811, 0.7739999890327454], [1.123955613002181, 0.7839999794960022], [1.129438322968781, 0.7839999794960022], [1.134921032935381, 0.7940000295639038], [1.1404037429019809, 0.8019999861717224], [1.1458864528685808, 0.8080000281333923], [1.1513691628351808, 0.8199999928474426], [1.1568518728017807, 0.8299999833106995], [1.1623345827683806, 0.8379999995231628], [1.1678172927349806, 0.8479999899864197], [1.1733000027015805, 0.8560000061988831], [1.1787827126681805, 0.8679999709129333], [1.1842654226347804, 0.8799999952316284], [1.1897481326013803, 0.8899999856948853], [1.1952308425679803, 0.8899999856948853], [1.2007135525345802, 0.9020000100135803], [1.2061962625011802, 0.9160000085830688], [1.2116789724677801, 0.9279999732971191], [1.21716168243438, 0.9399999976158142], [1.22264439240098, 0.9520000219345093], [1.22812710236758, 0.9639999866485596], [1.2336098123341799, 0.9800000190734863], [1.2390925223007798, 0.9959999918937683], [1.2445752322673798, 1.0080000162124634], [1.2500579422339797, 1.0219999551773071], [1.2555406522005796, 1.0379999876022339], [1.2610233621671796, 1.0379999876022339], [1.2665060721337795, 1.0740000009536743], [1.2719887821003795, 1.0740000009536743], [1.2774714920669794, 1.0920000076293945], [1.2829542020335793, 1.1100000143051147], [1.2884369120001793, 1.128000020980835], [1.2939196219667792, 1.149999976158142], [1.2994023319333792, 1.1720000505447388], [1.3048850418999791, 1.1959999799728394], [1.310367751866579, 1.215999960899353], [1.315850461833179, 1.2380000352859497], [1.321333171799779, 1.2640000581741333], [1.3268158817663789, 1.2640000581741333], [1.3322985917329788, 1.2879999876022339], [1.3377813016995788, 1.312000036239624], [1.3432640116661787, 1.340000033378601], [1.3487467216327786, 1.3700000047683716], [1.3542294315993786, 1.4019999504089355], [1.3597121415659785, 1.4320000410079956], [1.3651948515325785, 1.4639999866485596], [1.3706775614991784, 1.4579999446868896], [1.3761602714657784, 1.4160000085830688], [1.3816429814323783, 1.3940000534057617], [1.3871256913989782, 1.3919999599456787], [1.3926084013655782, 1.3919999599456787], [1.3980911113321781, 1.3899999856948853], [1.403573821298778, 1.3880000114440918], [1.409056531265378, 1.3860000371932983], [1.414539241231978, 1.3839999437332153], [1.4200219511985779, 1.3839999437332153], [1.4255046611651778, 1.3819999694824219], [1.4309873711317778, 1.3799999952316284], [1.4364700810983777, 1.3799999952316284], [1.4419527910649776, 1.378000020980835], [1.4474355010315776, 1.3760000467300415], [1.4529182109981775, 1.3760000467300415], [1.4584009209647775, 1.3739999532699585], [1.4638836309313774, 1.371999979019165], [1.4693663408979774, 1.371999979019165], [1.4748490508645773, 1.371999979019165], [1.4803317608311772, 1.371999979019165], [1.4858144707977772, 1.3700000047683716], [1.4912971807643771, 1.3700000047683716], [1.496779890730977, 1.3680000305175781], [1.502262600697577, 1.3680000305175781], [1.507745310664177, 1.3680000305175781], [1.5132280206307769, 1.3660000562667847], [1.5187107305973768, 1.3660000562667847], [1.5241934405639768, 1.3639999628067017], [1.5296761505305767, 1.3639999628067017], [1.5351588604971766, 1.3639999628067017], [1.5406415704637766, 1.3619999885559082], [1.5461242804303765, 1.3619999885559082], [1.5516069903969765, 1.3619999885559082], [1.5570897003635764, 1.3619999885559082], [1.5625724103301764, 1.3619999885559082], [1.5680551202967763, 1.3619999885559082], [1.5735378302633762, 1.3619999885559082], [1.5790205402299762, 1.3600000143051147], [1.5845032501965761, 1.3600000143051147], [1.589985960163176, 1.3600000143051147], [1.595468670129776, 1.3600000143051147], [1.600951380096376, 1.3600000143051147], [1.6064340900629759, 1.3600000143051147], [1.6119168000295758, 1.3600000143051147], [1.6173995099961758, 1.3619999885559082], [1.6228822199627757, 1.3619999885559082], [1.6283649299293756, 1.3600000143051147], [1.6338476398959756, 1.3600000143051147], [1.6393303498625755, 1.3600000143051147], [1.6448130598291755, 1.3600000143051147], [1.6502957697957754, 1.3600000143051147], [1.6557784797623754, 1.3619999885559082], [1.6612611897289753, 1.3619999885559082], [1.6667438996955752, 1.3639999628067017], [1.6722266096621752, 1.3639999628067017], [1.6777093196287751, 1.3639999628067017], [1.683192029595375, 1.3639999628067017], [1.688674739561975, 1.3660000562667847], [1.694157449528575, 1.3639999628067017], [1.6996401594951749, 3.2160000801086426], [1.7051228694617748, 3.2160000801086426], [1.7106055794283748, 3.2160000801086426], [1.7160882893949747, 3.2160000801086426], [1.7215709993615746, 3.2160000801086426], [1.7270537093281746, 3.2200000286102295], [1.7325364192947745, 3.2239999771118164], [1.7380191292613745, 3.2279999256134033], [1.7435018392279744, 3.2279999256134033], [1.7489845491945744, 3.191999912261963], [1.7544672591611743, 3.1600000858306885], [1.7599499691277742, 3.1600000858306885], [1.7654326790943742, 3.1600000858306885], [1.7709153890609741, 3.1760001182556152], [1.776398099027574, 3.2200000286102295], [1.781880808994174, 3.24399995803833], [1.787363518960774, 3.24399995803833], [1.7928462289273739, 3.247999906539917], [1.7983289388939738, 3.247999906539917], [1.8038116488605738, 3.252000093460083], [1.8092943588271737, 3.25600004196167], [1.8147770687937737, 3.259999990463257], [1.8202597787603736, 3.2639999389648438], [1.8257424887269735, 3.2639999389648438], [1.8312251986935735, 3.2679998874664307], [1.8367079086601734, 3.2760000228881836], [1.8421906186267734, 3.2760000228881836], [1.8476733285933733, 3.2799999713897705], [1.8531560385599732, 3.2839999198913574], [1.8586387485265732, 3.2880001068115234], [1.8641214584931731, 3.2960000038146973], [1.869604168459773, 3.299999952316284], [1.875086878426373, 3.308000087738037], [1.880569588392973, 3.312000036239624], [1.8860522983595729, 3.319999933242798], [1.8915350083261728, 3.3239998817443848], [1.8970177182927728, 3.3320000171661377], [1.9025004282593727, 3.3399999141693115], [1.9079831382259727, 3.3440001010894775], [1.9134658481925726, 3.3440001010894775], [1.9189485581591725, 3.3480000495910645], [1.9244312681257725, 3.3519999980926514], [1.9299139780923724, 1.3559999465942383], [1.9353966880589724, 1.3559999465942383], [1.9408793980255723, 1.3559999465942383], [1.9463621079921722, 1.3459999561309814], [1.9518448179587722, 1.3459999561309814], [1.9573275279253721, 1.3459999561309814], [1.962810237891972, 1.3480000495910645], [1.968292947858572, 1.350000023841858], [1.973775657825172, 1.3539999723434448], [1.9792583677917719, 1.3559999465942383], [1.9847410777583718, 2.812000036239624], [1.9902237877249718, 2.812000036239624], [1.9957064976915717, 2.812000036239624], [2.0011892076581717, 2.812000036239624], [2.0066719176247716, 2.7720000743865967], [2.0121546275913715, 2.7679998874664307], [2.0176373375579715, 2.7720000743865967], [2.0231200475245714, 2.7839999198913574], [2.0286027574911714, 2.7920000553131104], [2.0340854674577713, 2.799999952316284], [2.0395681774243712, 2.803999900817871], [2.045050887390971, 2.808000087738037], [2.050533597357571, 2.815999984741211], [2.056016307324171, 2.8239998817443848], [2.061499017290771, 2.828000068664551], [2.066981727257371, 2.828000068664551], [2.072464437223971, 2.8320000171661377], [2.077947147190571, 2.8440001010894775], [2.0834298571571708, 2.8559999465942383], [2.0889125671237707, 2.868000030517578], [2.0943952770903707, 2.875999927520752], [2.0998779870569706, 2.888000011444092], [2.1053606970235705, 3.6440000534057617], [2.1108434069901705, 3.6440000534057617], [2.1163261169567704, 3.6440000534057617], [2.1218088269233704, 3.6440000534057617], [2.1272915368899703, 3.6600000858306885], [2.1327742468565702, 3.671999931335449], [2.13825695682317, 3.687999963760376], [2.14373966678977, 3.7039999961853027], [2.14922237675637, 3.7119998931884766], [2.15470508672297, 3.7200000286102295], [2.16018779668957, 3.7320001125335693], [2.16567050665617, 3.74399995803833], [2.17115321662277, 3.752000093460083], [2.1766359265893698, 3.759999990463257], [2.1821186365559697, 3.7679998874664307], [2.1876013465225697, 3.7799999713897705], [2.1930840564891696, 3.7920000553131104], [2.1985667664557695, 3.803999900817871], [2.2040494764223695, 3.819999933242798], [2.2095321863889694, 3.8399999141693115], [2.2150148963555694, 3.859999895095825], [2.2204976063221693, 3.884000062942505], [2.2259803162887692, 3.9040000438690186], [2.231463026255369, 3.9119999408721924], [2.236945736221969, 3.927999973297119], [2.242428446188569, 3.944000005722046], [2.247911156155169, 3.996000051498413], [2.253393866121769, 4.039999961853027], [2.258876576088369, 4.052000045776367], [2.264359286054969, 6.935999870300293], [2.2698419960215688, 6.935999870300293], [2.2753247059881687, 6.935999870300293], [2.2808074159547687, 6.9679999351501465], [2.2862901259213686, 6.992000102996826], [2.2917728358879685, 7.007999897003174], [2.330151805654168, 4.360000133514404], [2.335634515620768, 4.360000133514404], [2.341117225587368, 4.360000133514404], [2.346599935553968, 4.392000198364258], [2.352082645520568, 4.392000198364258], [2.357565355487168, 4.400000095367432], [2.3630480654537678, 4.423999786376953], [2.3685307754203677, 4.440000057220459], [2.3740134853869677, 4.464000225067139], [2.3794961953535676, 4.504000186920166], [2.3849789053201675, 4.519999980926514], [2.3904616152867675, 4.5279998779296875], [2.3959443252533674, 4.552000045776367], [2.4014270352199674, 4.584000110626221], [2.4069097451865673, 4.616000175476074], [2.4123924551531672, 4.624000072479248], [2.417875165119767, 4.6479997634887695], [2.423357875086367, 4.703999996185303], [2.428840585052967, 4.728000164031982], [2.434323295019567, 4.751999855041504], [2.439806004986167, 4.76800012588501], [2.445288714952767, 4.791999816894531], [2.450771424919367, 4.815999984741211], [2.4562541348859668, 4.855999946594238], [2.4617368448525667, 4.888000011444092], [2.4672195548191667, 4.927999973297119], [2.4727022647857666, 4.927999973297119], [2.4781849747523665, 4.97599983215332], [2.4836676847189665, 5.064000129699707], [2.4891503946855664, 5.072000026702881], [2.4946331046521664, 5.0], [2.5001158146187663, 4.9679999351501465], [2.5055985245853662, 4.952000141143799], [2.511081234551966, 4.935999870300293], [2.516563944518566, 4.9039998054504395], [2.522046654485166, 4.880000114440918], [2.527529364451766, 4.855999946594238], [2.533012074418366, 4.831999778747559], [2.538494784384966, 4.808000087738037], [2.543977494351566, 4.791999816894531], [2.549460204318166, 4.776000022888184], [2.5549429142847657, 4.760000228881836], [2.5604256242513657, 4.736000061035156], [2.5659083342179656, 4.728000164031982], [2.5713910441845655, 4.711999893188477], [2.5768737541511655, 4.696000099182129], [2.5823564641177654, 4.671999931335449], [2.5878391740843654, 4.6479997634887695], [2.5933218840509653, 4.631999969482422], [2.5988045940175653, 4.616000175476074], [2.604287303984165, 4.5920000076293945], [2.609770013950765, 4.576000213623047], [2.615252723917365, 4.559999942779541], [2.620735433883965, 4.544000148773193], [2.626218143850565, 4.519999980926514], [2.631700853817165, 4.51200008392334], [2.637183563783765, 4.504000186920166], [2.642666273750365, 4.48799991607666], [2.6481489837169647, 4.4720001220703125], [2.6536316936835647, 4.455999851226807], [2.6591144036501646, 4.440000057220459], [2.6645971136167645, 4.423999786376953], [2.6700798235833645, 4.415999889373779], [2.6755625335499644, 4.415999889373779], [2.6810452435165644, 4.400000095367432], [2.6865279534831643, 4.383999824523926], [2.6920106634497643, 4.368000030517578], [2.697493373416364, 4.343999862670898], [2.702976083382964, 4.328000068664551], [2.708458793349564, 4.320000171661377], [2.713941503316164, 4.303999900817871], [2.719424213282764, 4.288000106811523], [2.724906923249364, 4.271999835968018], [2.730389633215964, 4.25600004196167], [2.735872343182564, 4.248000144958496], [2.7413550531491637, 4.23199987411499], [2.7468377631157637, 4.223999977111816], [2.7523204730823636, 4.216000080108643], [2.7578031830489635, 4.208000183105469], [2.7632858930155635, 4.199999809265137], [2.7687686029821634, 4.184000015258789], [2.7742513129487634, 4.168000221252441], [2.7797340229153633, 4.159999847412109], [2.7852167328819633, 4.1519999504089355], [2.790699442848563, 4.144000053405762], [2.796182152815163, 4.127999782562256], [2.801664862781763, 4.119999885559082], [2.807147572748363, 4.111999988555908], [2.812630282714963, 4.104000091552734], [2.818112992681563, 4.0879998207092285], [2.823595702648163, 4.084000110626221], [2.829078412614763, 4.076000213623047], [2.8345611225813627, 4.064000129699707], [2.8400438325479627, 4.052000045776367], [2.8455265425145626, 4.047999858856201], [2.8510092524811625, 4.044000148773193], [2.8564919624477625, 4.0320000648498535], [2.8619746724143624, 4.019999980926514], [2.8674573823809624, 4.015999794006348], [2.8729400923475623, 4.01200008392334], [2.8784228023141623, 4.004000186920166], [2.883905512280762, 3.996000051498413], [2.889388222247362, 3.992000102996826], [2.894870932213962, 3.9839999675750732], [2.900353642180562, 3.9800000190734863], [2.905836352147162, 3.9719998836517334], [2.911319062113762, 3.9679999351501465], [2.916801772080362, 3.9679999351501465], [2.922284482046962, 3.9679999351501465], [2.9277671920135617, 3.9639999866485596], [2.9332499019801617, 3.9560000896453857], [2.9387326119467616, 3.947999954223633], [2.9442153219133615, 3.944000005722046], [2.9496980318799615, 3.944000005722046], [2.9551807418465614, 3.936000108718872], [2.9606634518131614, 3.931999921798706], [2.9661461617797613, 3.9240000247955322], [2.9716288717463613, 3.9200000762939453], [2.977111581712961, 3.9159998893737793], [2.982594291679561, 3.9119999408721924], [2.988077001646161, 3.9079999923706055], [2.993559711612761, 3.9040000438690186], [2.999042421579361, 3.9000000953674316], [3.004525131545961, 3.8959999084472656], [3.010007841512561, 3.8919999599456787], [3.015490551479161, 3.884000062942505], [3.0209732614457607, 3.875999927520752], [3.0264559714123607, 3.871999979019165], [3.0319386813789606, 3.871999979019165], [3.0374213913455606, 3.868000030517578], [3.0483868112787604, 0.8980000019073486], [3.0538695212453604, 0.8980000019073486], [3.0593522312119603, 0.8980000019073486], [3.0648349411785603, 0.8980000019073486], [3.07031765114516, 0.8799999952316284], [3.07580036111176, 0.8799999952316284], [3.08128307107836, 0.8659999966621399], [3.08676578104496, 0.8539999723434448], [3.09224849101156, 0.8420000076293945], [3.09773120097816, 0.8360000252723694], [3.10321391094476, 0.8259999752044678], [3.10869662091136, 0.8180000185966492], [3.1141793308779597, 0.8080000281333923], [3.1196620408445597, 0.8019999861717224], [3.1251447508111596, 0.800000011920929], [3.1306274607777596, 0.7960000038146973], [3.1361101707443595, 0.7919999957084656], [3.1415928807109594, 0.7900000214576721]] 
     
    wall_detector = wall_detection(lidar_data, robotX, robotY, robotTheta)
    
    # break_point_ind = 158
    
    
    # seed_ind = wall_detector.seed_segment_detection(break_point_ind)

    # print('seed ind', seed_ind)
    # line_segment = wall_detector.seed_segment_growing(seed_ind, 0)
    # print(line_segment)
# =============================================================================
#     
#     print('len lidar data', len(lidar_data))
#     for i in range(len(lidar_data)):
#             
#         seed_ind = wall_detector.seed_segment_detection(break_point_ind)
# 
#         print('seed ind', seed_ind)
#         line_segment = wall_detector.seed_segment_growing(seed_ind, 0)
#         break_point_ind = line_segment[3]
#         print('bop ind ', break_point_ind)
#         #print('line segment points')
#         #print(line_segment[1])
#         
#     ax = plt.gca()
#     ax.set_aspect('equal', adjustable='box')
#     plt.draw()
# =============================================================================
# =============================================================================
# 
#     print(wallx)
# =============================================================================
    line_segments = wall_detector.detected_walls()
    plot_line_segments(line_segments)               # print('dist = ', self.dist_p2l(self.LidarPoints[PF][0], line_eq) )
    
    #print(wall_detector.detected_walls)
    #print(line_segment[1])