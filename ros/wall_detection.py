# -*- coding: utf-8 -*-
"""
Created on Tue Jan 31 10:37:37 2023
@author: Tejas Rao
"""

from fractions import Fraction
from scipy.odr import * 
import numpy as np 

import math 
import matplotlib.pyplot as plt
import time

# Defining Helper funcitons
class wall_detection():

    def __init__(self, lidar_data, robotX, robotY ,robotTheta):
      tick = time.time()
      self.lidar_data = lidar_data
      self.robotX = robotX
      self.robotY = robotY
      self.robotTheta = robotTheta
      
      self.LidarPoints = []
      
     
      self.epsilon = 0.1
      self.Min_SeedSeg_len = 5
     
      self.Min_PTS_LS = 6
      self.Delta = 1
     
      self.Num_Pts= len(lidar_data)
      self.Gmax = 1
      self.Min_LS_len = 0.4
      self.Min_distp2p = 0.2
      self.sub_sample_lidar(sub_sample_rate=3)
     
      self.lidar_data2coord()
      self.line_segments = []
      self.break_point_ind = 0
      self.angle_threshold = 5 * math.pi / 180
      self.dist_threshold = 0.0
      self.merged_line_segments_parametric = []
      tock = time.time()

    
    def detected_walls(self, flag):
        t1 = time.time()

        break_point_ind = self.break_point_ind
        while break_point_ind < self.Num_Pts - self.Min_PTS_LS:
            t2 = time.time()
            seed_ind = self.seed_segment_detection(break_point_ind)
           # print('seed_ind',seed_ind)
            t0 = time.time()
            if flag == True:
                print(f'time for detecting the seed segments: {t0-t2}')
            if not seed_ind:
                break_point_ind += 1
                continue
            (i, j) = seed_ind
            t3 = time.time()
            grown_seed_segment =self.seed_segment_growing((i, j), 0)
            bp_ind = grown_seed_segment[3]
            
            if bp_ind == ():
                break_point_ind = j + 1
            else:
                break_point_ind = bp_ind
            t4 = time.time()
            if flag == True:    
                print(f'time for detecting the line segment: {t4 -t3}')
        
        
        t5 = time.time()
        if flag == True:
            print(f'time for detecting all ls: {t5 -t1}')
        self.merge_LS_naive()   
        t6 = time.time()    
        if flag == True:
            print(f'time for merging: {t6 -t5}')
    # =============================================================================
    #         print(f'total time {t6 - t1}')
    # =============================================================================
        if flag == False:
            return self.merged_line_segments_parametric
        else:
            return self.line_segments
    
    def get_ls(self):
        return self.line_segments        
    
    def merge_LS_naive(self):
        
        visited = [False for i in range(len(self.line_segments))]
        merged_line_segments = []
        for i in range(len(self.line_segments)):
            if visited[i] == True:
                continue
            p11, p12 = self.line_segments[i]

            
            for j in range(i+1, len(self.line_segments)):

                if visited[j]:
                    continue
                
                visited[i] = True
                
                p21, p22 = self.line_segments[j]

 
                m1, c1 = self.points_2line(p11, p12)
                m2, c2 = self.points_2line(p21, p22)
                
                l1 = self.line_tf_SI2G(m1, c1)
                l2 = self.line_tf_SI2G(m2, c2)
                
                d1 = self.dist_p2l([0,0], l1)
                d2 = self.dist_p2l([0,0], l2)
                (y1, x1) = self.projection_point2line([0, 0], m1, c1)
                (y2, x2) = self.projection_point2line([0, 0], m2, c2)
                
                t1 = math.atan2(y1, x1)
                if t1 < 0: 
                    t1 = 2*math.pi + t1
                
                t2 = math.atan2(y2, x2)
                if t2 < 0: 
                    t2 = 2*math.pi + t2
                
                delta_t = min(abs(t1-t2), abs(2 *math.pi - abs(t1-t2)))
                
                r_mean = (d1 + d2)/2
                dist_perc = max(abs(d1-r_mean),abs(d2-r_mean)) / r_mean
                
                
                if delta_t < self.angle_threshold and dist_perc < self.dist_threshold: 
                    
                    visited[j] = True 
                    
                    d1 = self.dist_p2p(p11, p21)
                    d2 = self.dist_p2p(p11, p22)
                    
                    if d1 > d2:
                        p11 = p21
                    else:
                        p12 = p22
                else:                    
                    pass
            m, c= self.points_2line(p11, p12)
            line_params = self.line_tf_SI2G(m, c)
            [alpha,r] = self.line_tf_SI2P(line_params, m, c, self.robotX, self.robotY, self.robotTheta)
            

            self.merged_line_segments_parametric.append([alpha,r])
            merged_line_segments.append([p11, p12])
                
        self.line_segments = merged_line_segments
                
    def dist_p2p(self, p1, p2):
    
      x = p1[0] - p2[0]
      y = p1[1] - p2[1]
    
      return math.sqrt(x ** 2 + y ** 2)
       
    def dist_p2l(self, p, l):
    
      A, B, C = l
      x = p[0]
      y = p[1]
      d = abs(A*x + B*y + C) / (math.sqrt(A**2 + B**2 ))
      
      return d 
    
    # Slope intercept form
    def line_extract2points(self, m, c, p1, p2):
      
      x1 = p1[0]
      y1 = m* x1 + c
      x2 = p2[0]
      y2 = m*x2 + c
      

      return ((x1, y1), (x2, y2))
    
    def line_tf_SI2P(self, line_params, m,c, x, y, theta):

        r = self.dist_p2l([0,0], line_params)
        p = self.projection_point2line([0,0], m, c)
        
        alpha= np.arctan2(p[1], p[0]) + math.pi/2

        if alpha < 0:
            alpha = np.pi + (np.pi + alpha)

        return [alpha, r]
    
    def line_tf_G2SI(self, A, B, C):
    
      m = -A/B
      c = -C/B
      return m, c
    
    def line_tf_SI2G(self, m, c):

        A, B, C = -m, 1, -c
    
        if A < 0:
            A, B, C = -A, -B, -C
      
        den_a = Fraction(A).limit_denominator(1000).as_integer_ratio()[1]
        den_c = Fraction(C).limit_denominator(1000).as_integer_ratio()[1]
        
        gcd = np.gcd(den_a, den_c)
        lcm = den_a * den_c / gcd
        
        A = A * lcm
        B = B * lcm
        C = C * lcm 

        return A, B, C
  
    def line_intersect_general(self, params1, params2):
    
        a1, b1, c1 = params1
        a2, b2, c2 = params2
        
        # check if lines arent parallel

        if a1/a2 == b1/b2 and a1/a2 != c1/c2:
          return None
        
        else:
        
          x = (c1 * b2 - b1 * c2) / (b1 * a2 - a1 * b2)
          y = (a1 *c2 - a2 * c1) / (b1 *a2 - a1 * b2)
        
          return x, y
    
    def points_2line(self, point1, point2):
        x1,y1 = point1    
        x2, y2 = point2       
        if x1 == x2:
          pass  
        else:
          m = (y2- y1)/ (x2 - x1)
          c = y2 -m * x2      
        return m, c
    
    def projection_point2line(self, point, m, c):
        
        x, y = point 
        if m != 0:
          m2 = -1/m 
          c2 = y - m2 * x
        
          intersection_x = - (c - c2) / (m - m2)
          intersection_y = m2 * intersection_x  + c2 
        else:
          intersection_x = x 
          intersection_y = c
        
        return intersection_x, intersection_y
    
    def sub_sample_lidar(self, sub_sample_rate=10):
        
        i = 0
        sub_lidar = []
        while i < len(self.lidar_data):
            sub_lidar.append(self.lidar_data[i])
            i += sub_sample_rate
        
        self.lidar_data = sub_lidar
        self.Num_Pts = len(self.lidar_data)
    
    def lidar_data2coord(self):
        
        
        for id, point in enumerate(self.lidar_data):
       
         theta, r = point 
       
         angle = theta  + 0 
         x_coord = 0 + r * math.cos(angle)
         y_coord = 0 + r * math.sin(angle)

         coord = [x_coord, y_coord]
         self.LidarPoints.append([coord, angle])
 
    def linear_func(self, p, x):
        m, c = p 
        return m * x + c
    
    def odr_fit(self, laser_points):
        
        x = np.array([i[0][0] for i in laser_points])
        y = np.array([i[0][1] for i in laser_points])
        
        linear_model = Model(self.linear_func)

        data = RealData(x, y)
        odr_model = ODR(data, linear_model, beta0=[0., 0.])
        
        out=  odr_model.run()
        
        m, c = out.beta
        
        return m, c
        
    def predictPoint(self, line_params, sensed_point):
        robotPos = (self.robotX, self.robotY)
        m, c = self.points_2line(robotPos, sensed_point)
        params1 = self.line_tf_SI2G(m, c)
        predx, predy = self.line_intersect_general(params1, line_params)
        return predx, predy 

    def seed_segment_detection(self,break_point_ind):

        self.Num_Pts = max(0, self.Num_Pts)
        self.seed_segments = []
        
        for i in range(break_point_ind, (self.Num_Pts - self.Min_PTS_LS)):
            Flag = True 
            j  = i + self.Min_SeedSeg_len
            m, c = self.odr_fit(self.LidarPoints[i:j])
  
            line_params= self.line_tf_SI2G(m, c)
            p1, p2 = [], []

            for k in range(i, j):

                d1 = self.dist_p2l(self.LidarPoints[k][0], line_params)
                if d1 > self.epsilon:

                  Flag = False
                  break
                
                predicted_point = self.predictPoint(line_params, self.LidarPoints[k][0])
                d2 = self.dist_p2p(predicted_point, self.LidarPoints[k][0])

                p2 = predicted_point 
                if k > i: 
                  d3 = self.dist_p2p(p1, p2)

                  if d3 > self.Min_distp2p:
                    Flag = False
                    break
                
                p1 = p2

                if d2 > self.Delta:
                  Flag == False

                  break
            if Flag == True:
                self.line_params = line_params 
                return (i, j)
        return None

    def seed_segment_growing(self, indices, break_point):
    
        line_eq = self.line_params
        i, j = indices 

        
        PB, PF = max(break_point, i-1), min(j, len(self.LidarPoints) - 1)
        
        
        while True:
            if self.dist_p2l(self.LidarPoints[PF][0], line_eq) > self.epsilon:
                PF -= 1
                break

            m, c = self.odr_fit(self.LidarPoints[PB+1:PF])
            line_eq = self.line_tf_SI2G(m, c)
            Point = self.LidarPoints[PF][0]
        
            PF = PF +1 
            if PF > self.Num_Pts -1:
                PF -= 1
                break
            NextPoint = self.LidarPoints[PF][0]
            if self.dist_p2p(Point, NextPoint) > self.Gmax:
                PF -= 1
                break 
       
        while True:
            if self.dist_p2l(self.LidarPoints[PB][0], line_eq) > self.epsilon:
                PB += 1
                break

            m, c = self.odr_fit(self.LidarPoints[PB:PF])
            line_eq = self.line_tf_SI2G(m, c)
            Point = self.LidarPoints[PB][0]
            
            PB -= 1
            if PB < 0:
                PB += 1 

                break
            NextPoint = self.LidarPoints[PB][0]
            if self.dist_p2p(Point, NextPoint) > self.Gmax:
                break
            
        Len_LS = self.dist_p2p(self.LidarPoints[PB][0],self.LidarPoints[PF][0])
        Num_P = len(self.LidarPoints[PB:PF+1])

        if (Len_LS >= self.Min_LS_len) and (Num_P >= self.Min_PTS_LS):
              
            m, c = self.line_tf_G2SI(line_eq[0], line_eq[1], line_eq[2])
            alpha, r = self.line_tf_SI2P([line_eq[0], line_eq[1], line_eq[2]],m, c, self.robotX, self.robotY, self.robotTheta)

            ext_point1 = self.projection_point2line(self.LidarPoints[PB][0], m, c)
            ext_point2 = self.projection_point2line(self.LidarPoints[PF][0], m, c)
            
            if self.dist_p2p(ext_point1, ext_point2) < self.Min_LS_len:
                [(), (), (), (), (), (), ()]
            
            two_points = (ext_point1, ext_point2)
            
            
            self.line_segments.append(two_points)
            return [self.LidarPoints[PB:PF+1], two_points, (self.LidarPoints[PB+1][0], self.LidarPoints[PF-1][0]), PF, line_eq, (m, c)]
        else:

            return  [(), (), (), (), (), (), ()]
          
          
def wall_2_lidar(wallx, wally, robotX, robotY, robotTheta):
    
    lidar_data = []
    for x, y in zip(wallx, wally):
            
        rel_x = x - robotX
        rel_y = y - robotY
        theta = math.atan2(rel_y, rel_x) - robotTheta 
        r = math.sqrt( rel_y ** 2 + rel_x ** 2)
        
        lidar_data.append([r, theta])
    return lidar_data    
        
def plot_line_segments(points):
    
    for point_pair in points:
        p1, p2 = point_pair
        plt.plot((p1[0], p2[0]), (p1[1], p2[1]), 'black')
    

if __name__ ==  "__main__":
        
    robotPos = [0, 0, 0]
    robotX, robotY, robotTheta = [4.105627981317324 ,1.086687719476286, -0.2558932098349782]
    lidar_data = [[0, 8.634217262268066], [0.004363323096185923, 8.626260757446289], [0.008726646192371845, 8.618483543395996], [0.013089969288557768, 8.610882759094238], [0.01745329238474369, 8.603461265563965], [0.021816615480929613, 8.596213340759277], [0.026179938577115536, 8.589141845703125], [0.03054326167330146, 8.582247734069824], [0.03490658476948738, 8.57552433013916], [0.039269907865673304, 8.568975448608398], [0.043633230961859226, 8.562601089477539], [0.04799655405804515, 8.556394577026367], [0.05235987715423107, 8.550365447998047], [0.056723200250416994, 8.544504165649414], [0.06108652334660292, 8.538814544677734], [0.06544984644278884, 8.533293724060059], [0.06981316953897476, 8.527944564819336], [0.07417649263516068, 8.522761344909668], [0.07853981573134661, 8.517746925354004], [0.08290313882753253, 8.512901306152344], [0.08726646192371845, 8.508221626281738], [0.09162978501990438, 8.503713607788086], [0.0959931081160903, 8.499366760253906], [0.10035643121227622, 8.49518871307373], [0.10471975430846214, 8.49117374420166], [0.10908307740464807, 8.487326622009277], [0.11344640050083399, 8.483644485473633], [0.11780972359701991, 8.48012638092041], [0.12217304669320583, 8.476752281188965], [0.12653636978939176, 8.473562240600586], [0.13089969288557768, 8.470536231994629], [0.1352630159817636, 8.467674255371094], [0.13962633907794952, 8.464974403381348], [0.14398966217413545, 8.462435722351074], [0.14835298527032137, 8.460061073303223], [0.1527163083665073, 8.457846641540527], [0.15707963146269321, 8.45579719543457], [0.16144295455887914, 8.453908920288086], [0.16580627765506506, 8.452181816101074], [0.17016960075125098, 8.450615882873535], [0.1745329238474369, 8.449212074279785], [0.17889624694362283, 8.447969436645508], [0.18325957003980875, 8.44688892364502], [0.18762289313599467, 8.445967674255371], [0.1919862162321806, 8.445208549499512], [0.19634953932836652, 8.444610595703125], [0.20071286242455244, 8.444172859191895], [0.20507618552073836, 8.443893432617188], [0.20943950861692429, 8.443779945373535], [0.2138028317131102, 8.44382381439209], [0.21816615480929613, 8.4440279006958], [0.22252947790548205, 8.444397926330566], [0.22689280100166798, 8.444921493530273], [0.2312561240978539, 8.445610046386719], [0.23561944719403982, 8.446459770202637], [0.23998277029022574, 8.447468757629395], [0.24434609338641167, 8.448639869689941], [0.2487094164825976, 8.449972152709961], [0.2530727395787835, 8.451465606689453], [0.25743606267496943, 8.453119277954102], [0.26179938577115536, 8.454936027526855], [0.2661627088673413, 8.456916809082031], [0.2705260319635272, 8.459057807922363], [0.2748893550597131, 8.461359024047852], [0.27925267815589905, 8.463825225830078], [0.28361600125208497, 8.466453552246094], [0.2879793243482709, 8.469244956970215], [0.2923426474444568, 8.472196578979492], [0.29670597054064274, 8.47531509399414], [0.30106929363682866, 8.478596687316895], [0.3054326167330146, 8.482040405273438], [0.3097959398292005, 8.485650062561035], [0.31415926292538643, 8.489425659179688], [0.31852258602157235, 8.493364334106445], [0.3228859091177583, 8.49747085571289], [0.3272492322139442, 8.501744270324707], [0.3316125553101301, 8.506176948547363], [0.33597587840631604, 8.510783195495605], [0.34033920150250196, 8.51555347442627], [0.3447025245986879, 8.520491600036621], [0.3490658476948738, 8.525598526000977], [0.35342917079105973, 8.530876159667969], [0.35779249388724566, 8.536250114440918], [0.3621558169834316, 8.541864395141602], [0.3665191400796175, 8.547648429870605], [0.3708824631758034, 8.553605079650879], [0.37524578627198935, 8.559730529785156], [0.37960910936817527, 8.566028594970703], [0.3839724324643612, 8.572502136230469], [0.3883357555605471, 8.579147338867188], [0.39269907865673304, 8.585965156555176], [0.39706240175291896, 8.592958450317383], [0.4014257248491049, 8.600126266479492], [0.4057890479452908, 8.607471466064453], [0.4101523710414767, 8.614992141723633], [0.41451569413766265, 8.622690200805664], [0.41887901723384857, 8.63056755065918], [0.4232423403300345, 8.638625144958496], [0.4276056634262204, 8.64686107635498], [0.43196898652240634, 8.65527629852295], [0.43633230961859226, 8.663875579833984], [0.4406956327147782, 8.672656059265137], [0.4450589558109641, 8.681619644165039], [0.44942227890715003, 8.690764427185059], [0.45378560200333595, 8.700098037719727], [0.4581489250995219, 8.709617614746094], [0.4625122481957078, 8.719322204589844], [0.4668755712918937, 8.729217529296875], [0.47123889438807964, 8.739299774169922], [0.47560221748426557, 8.749574661254883], [0.4799655405804515, 8.760035514831543], [0.4843288636766374, 8.770694732666016], [0.48869218677282333, 8.78154468536377], [0.49305550986900926, 8.792591094970703], [0.4974188329651952, 8.803827285766602], [0.5017821560613811, 8.815264701843262], [0.506145479157567, 8.826898574829102], [0.510508802253753, 8.838736534118652], [0.5148721253499389, 8.850768089294434], [0.5192354484461248, 8.863006591796875], [0.5235987715423107, 8.875444412231445], [0.5279620946384966, 8.888087272644043], [0.5323254177346826, 8.900938034057617], [0.5366887408308685, 8.913994789123535], [0.5410520639270544, 8.927260398864746], [0.5454153870232403, 8.94073486328125], [0.5497787101194263, 8.954423904418945], [0.5541420332156122, 8.968323707580566], [0.5585053563117981, 8.982436180114746], [0.562868679407984, 8.996768951416016], [0.5672320025041699, 9.01131534576416], [0.5715953256003559, 9.026082038879395], [0.5759586486965418, 8.928987503051758], [0.5803219717927277, 8.8284330368042], [0.5846852948889136, 8.730286598205566], [0.5890486179850996, 8.634456634521484], [0.5934119410812855, 8.540875434875488], [0.5977752641774714, 8.449455261230469], [0.6021385872736573, 8.360128402709961], [0.6065019103698432, 8.27282428741455], [0.6108652334660292, 8.18748664855957], [0.6152285565622151, 8.104039192199707], [0.619591879658401, 8.022428512573242], [0.6239552027545869, 7.942596912384033], [0.6283185258507729, 7.864482879638672], [0.6326818489469588, 7.788037300109863], [0.6370451720431447, 7.713212490081787], [0.6414084951393306, 7.639951705932617], [0.6457718182355165, 7.568214416503906], [0.6501351413317025, 7.497953414916992], [0.6544984644278884, 7.4291253089904785], [0.6588617875240743, 7.361685752868652], [0.6632251106202602, 7.295599460601807], [0.6675884337164462, 7.230823993682861], [0.6719517568126321, 7.167324542999268], [0.676315079908818, 7.105067729949951], [0.6806784030050039, 7.0440168380737305], [0.6850417261011899, 6.984131336212158], [0.6894050491973758, 6.925390243530273], [0.6937683722935617, 6.8677568435668945], [0.6981316953897476, 6.811203956604004], [0.7024950184859335, 6.755705833435059], [0.7068583415821195, 6.701229095458984], [0.7112216646783054, 6.6477460861206055], [0.7155849877744913, 6.595239162445068], [0.7199483108706772, 6.543675422668457], [0.7243116339668632, 6.493039131164551], [0.7286749570630491, 6.443297386169434], [0.733038280159235, 6.394434452056885], [0.7374016032554209, 6.3464274406433105], [0.7417649263516068, 6.299253463745117], [0.7461282494477928, 6.252895355224609], [0.7504915725439787, 6.207332611083984], [0.7548548956401646, 6.162543296813965], [0.7592182187363505, 6.1185126304626465], [0.7635815418325365, 6.075221061706543], [0.7679448649287224, 6.032653331756592], [0.7723081880249083, 5.990787506103516], [0.7766715111210942, 5.949615478515625], [0.7810348342172801, 5.909115314483643], [0.7853981573134661, 5.869272708892822], [0.789761480409652, 5.830076217651367], [0.7941248035058379, 5.791510581970215], [0.7984881266020238, 5.753556728363037], [0.8028514496982098, 5.716207504272461], [0.8072147727943957, 5.67944860458374], [0.8115780958905816, 5.64326286315918], [0.8159414189867675, 5.60764217376709], [0.8203047420829535, 5.572575092315674], [0.8246680651791394, 5.538048267364502], [0.8290313882753253, 5.504051208496094], [0.8333947113715112, 5.470571517944336], [0.8377580344676971, 5.437602996826172], [0.8421213575638831, 5.405125141143799], [0.846484680660069, 5.373140811920166], [0.8508480037562549, 5.341630458831787], [0.8552113268524408, 5.310587406158447], [0.8595746499486268, 5.280006408691406], [0.8639379730448127, 5.249873161315918], [0.8683012961409986, 5.220179557800293], [0.8726646192371845, 5.190920352935791], [0.8770279423333704, 5.162085056304932], [0.8813912654295564, 5.133663654327393], [0.8857545885257423, 5.105651378631592], [0.8901179116219282, 5.078038692474365], [0.8944812347181141, 5.050821304321289], [0.8988445578143001, 5.023985385894775], [0.903207880910486, 4.99752950668335], [0.9075712040066719, 4.971444129943848], [0.9119345271028578, 4.9457244873046875], [0.9162978501990438, 4.920361042022705], [0.9206611732952297, 4.895351886749268], [0.9250244963914156, 4.870687961578369], [0.9293878194876015, 4.846359729766846], [0.9337511425837874, 4.822368621826172], [0.9381144656799734, 4.798701763153076], [0.9424777887761593, 4.775357723236084], [0.9468411118723452, 4.752328872680664], [0.9512044349685311, 4.729612827301025], [0.955567758064717, 4.707200050354004], [0.959931081160903, 4.685087203979492], [0.9642944042570889, 4.663270950317383], [0.9686577273532748, 4.641744136810303], [0.9730210504494607, 4.6205034255981445], [0.9773843735456467, 4.599542617797852], [0.9817476966418326, 4.578856945037842], [0.9861110197380185, 4.558444976806641], [0.9904743428342044, 4.538300037384033], [0.9948376659303904, 4.518416881561279], [0.9992009890265763, 4.4987921714782715], [1.0035643121227622, 4.479424476623535], [1.0079276352189481, 4.46030330657959], [1.012290958315134, 4.441433906555176], [1.01665428141132, 4.422804832458496], [1.021017604507506, 4.404415130615234], [1.0253809276036918, 4.386258602142334], [1.0297442506998777, 4.3683366775512695], [1.0341075737960637, 4.350643634796143], [1.0384708968922496, 4.333172798156738], [1.0428342199884355, 4.315927028656006], [1.0471975430846214, 4.298896312713623], [1.0515608661808074, 4.28208065032959], [1.0559241892769933, 4.26547908782959], [1.0602875123731792, 4.249085426330566], [1.0646508354693651, 4.232898235321045], [1.069014158565551, 4.216913223266602], [1.073377481661737, 4.201127529144287], [1.0777408047579229, 4.185540199279785], [1.0821041278541088, 4.170146465301514], [1.0864674509502947, 4.154944896697998], [1.0908307740464807, 4.139931678771973], [1.0951940971426666, 4.125103950500488], [1.0995574202388525, 4.110462188720703], [1.1039207433350384, 4.0960001945495605], [1.1082840664312243, 4.081718444824219], [1.1126473895274103, 4.067612648010254], [1.1170107126235962, 4.053679466247559], [1.1213740357197821, 4.039918899536133], [1.125737358815968, 4.026328086853027], [1.130100681912154, 4.012903690338135], [1.1344640050083399, 3.999645709991455], [1.1388273281045258, 3.9865503311157227], [1.1431906512007117, 3.9736156463623047], [1.1475539742968976, 3.96083927154541], [1.1519172973930836, 3.9482219219207764], [1.1562806204892695, 3.9357566833496094], [1.1606439435854554, 3.9234459400177], [1.1650072666816413, 3.911283493041992], [1.1693705897778273, 3.899272918701172], [1.1737339128740132, 3.8874106407165527], [1.178097235970199, 3.8756918907165527], [1.182460559066385, 3.86411714553833], [1.186823882162571, 3.852684497833252], [1.1911872052587569, 3.841392755508423], [1.1955505283549428, 3.8302390575408936], [1.1999138514511287, 3.819223403930664], [1.2042771745473146, 3.808342218399048], [1.2086404976435006, 3.7975947856903076], [1.2130038207396865, 3.7869811058044434], [1.2173671438358724, 3.7764973640441895], [1.2217304669320583, 3.766143798828125], [1.2260937900282443, 3.755917549133301], [1.2304571131244302, 3.745816230773926], [1.234820436220616, 3.735841989517212], [1.239183759316802, 3.7259910106658936], [1.243547082412988, 3.716262102127075], [1.2479104055091739, 3.706655502319336], [1.2522737286053598, 3.697167158126831], [1.2566370517015457, 3.687798500061035], [1.2610003747977316, 3.6785457134246826], [1.2653636978939176, 3.6694111824035645], [1.2697270209901035, 3.6603891849517822], [1.2740903440862894, 3.6514811515808105], [1.2784536671824753, 3.6426868438720703], [1.2828169902786613, 3.6340019702911377], [1.2871803133748472, 3.62542724609375], [1.291543636471033, 3.6169638633728027], [1.295906959567219, 3.608607292175293], [1.300270282663405, 3.6003572940826416], [1.3046336057595909, 3.5922131538391113], [1.3089969288557768, 3.5841736793518066], [1.3133602519519627, 3.5762393474578857], [1.3177235750481486, 3.568406105041504], [1.3220868981443346, 3.5606765747070312], [1.3264502212405205, 3.553046703338623], [1.3308135443367064, 3.545516014099121], [1.3351768674328923, 3.5380859375], [1.3395401905290782, 3.5307540893554688], [1.3439035136252642, 3.5235180854797363], [1.34826683672145, 3.5163800716400146], [1.352630159817636, 3.509336233139038], [1.356993482913822, 3.502387523651123], [1.3613568060100079, 3.4955337047576904], [1.3657201291061938, 3.488771438598633], [1.3700834522023797, 3.482102155685425], [1.3744467752985656, 3.475524425506592], [1.3788100983947515, 3.4690380096435547], [1.3831734214909375, 3.4626400470733643], [1.3875367445871234, 3.456331729888916], [1.3919000676833093, 3.450113534927368], [1.3962633907794952, 3.4439806938171387], [1.4006267138756812, 3.437936544418335], [1.404990036971867, 3.431978464126587], [1.409353360068053, 3.4261064529418945], [1.413716683164239, 3.420319080352783], [1.4180800062604249, 3.4146156311035156], [1.4224433293566108, 3.408997058868408], [1.4268066524527967, 3.4034621715545654], [1.4311699755489826, 3.398008108139038], [1.4355332986451685, 3.39263653755188], [1.4398966217413545, 3.3873465061187744], [1.4442599448375404, 3.3821372985839844], [1.4486232679337263, 3.377007246017456], [1.4529865910299122, 3.3719587326049805], [1.4573499141260982, 3.366987943649292], [1.461713237222284, 3.3620963096618652], [1.46607656031847, 3.357282876968384], [1.470439883414656, 3.352545976638794], [1.4748032065108418, 3.347886085510254], [1.4791665296070278, 3.343303918838501], [1.4835298527032137, 3.3387975692749023], [1.4878931757993996, 3.334364891052246], [1.4922564988955855, 3.3300092220306396], [1.4966198219917715, 3.325726270675659], [1.5009831450879574, 3.321519374847412], [1.5053464681841433, 3.3173863887786865], [1.5097097912803292, 3.3133254051208496], [1.5140731143765152, 3.309338092803955], [1.518436437472701, 3.30542254447937], [1.522799760568887, 3.3015801906585693], [1.527163083665073, 3.2978084087371826], [1.5315264067612588, 3.29410719871521], [1.5358897298574448, 3.290477991104126], [1.5402530529536307, 3.286919116973877], [1.5446163760498166, 3.283430337905884], [1.5489796991460025, 3.2800118923187256], [1.5533430222421885, 3.276662826538086], [1.5577063453383744, 3.273380994796753], [1.5620696684345603, 3.270169496536255], [1.5664329915307462, 3.2670257091522217], [1.5707963146269321, 3.263951301574707], [1.575159637723118, 3.2609434127807617], [1.579522960819304, 3.2580034732818604], [1.58388628391549, 3.255131483078003], [1.5882496070116758, 3.2523255348205566], [1.5926129301078618, 3.2495856285095215], [1.5969762532040477, 3.246913433074951], [1.6013395763002336, 3.244307279586792], [1.6057028993964195, 3.2417659759521484], [1.6100662224926054, 3.2392914295196533], [1.6144295455887914, 3.2368810176849365], [1.6187928686849773, 3.234537363052368], [1.6231561917811632, 3.232257604598999], [1.6275195148773491, 3.23004150390625], [1.631882837973535, 3.2278904914855957], [1.636246161069721, 3.225804090499878], [1.640609484165907, 3.223780870437622], [1.6449728072620928, 3.2218241691589355], [1.6493361303582788, 3.219928741455078], [1.6536994534544647, 3.2180979251861572], [1.6580627765506506, 3.2163288593292236], [1.6624260996468365, 3.21462345123291], [1.6667894227430224, 3.2129809856414795], [1.6711527458392084, 3.2114014625549316], [1.6755160689353943, 3.209885835647583], [1.6798793920315802, 3.2084312438964844], [1.6842427151277661, 3.2070395946502686], [1.688606038223952, 3.205709457397461], [1.692969361320138, 3.204442024230957], [1.697332684416324, 3.2032368183135986], [1.7016960075125098, 3.202091693878174], [1.7060593306086957, 3.2010109424591064], [1.7104226537048817, 3.199990749359131], [1.7147859768010676, 3.199031352996826], [1.7191492998972535, 3.198133707046509], [1.7235126229934394, 3.1972975730895996], [1.7278759460896254, 3.1965231895446777], [1.7322392691858113, 3.1958091259002686], [1.7366025922819972, 3.1951563358306885], [1.7409659153781831, 3.1945669651031494], [1.745329238474369, 3.194035291671753], [1.749692561570555, 3.19356632232666], [1.754055884666741, 3.193157196044922], [1.7584192077629268, 3.192809581756592], [1.7627825308591127, 3.192523717880249], [1.7671458539552987, 3.1922976970672607], [1.7715091770514846, 3.192131757736206], [1.7758725001476705, 3.1920278072357178], [1.7802358232438564, 3.1919848918914795], [1.7845991463400424, 3.1920015811920166], [1.7889624694362283, 3.192079782485962], [1.7933257925324142, 3.192218542098999], [1.7976891156286001, 3.1924185752868652], [1.802052438724786, 3.192678213119507], [1.806415761820972, 3.1929993629455566], [1.8107790849171579, 3.1933813095092773], [1.8151424080133438, 3.193824052810669], [1.8195057311095297, 3.1943280696868896], [1.8238690542057157, 3.194892406463623], [1.8282323773019016, 3.1955199241638184], [1.8325957003980875, 3.1962056159973145], [1.8369590234942734, 3.1969547271728516], [1.8413223465904593, 3.1977641582489014], [1.8456856696866453, 3.1986355781555176], [1.8500489927828312, 3.1995673179626465], [1.8544123158790171, 3.200561285018921], [1.858775638975203, 3.201616048812866], [1.863138962071389, 3.2027339935302734], [1.8675022851675749, 3.2039129734039307], [1.8718656082637608, 3.205153465270996], [1.8762289313599467, 3.206456422805786], [1.8805922544561327, 3.2078213691711426], [1.8849555775523186, 3.2092478275299072], [1.8893189006485045, 3.210737705230713], [1.8936822237446904, 3.212289810180664], [1.8980455468408763, 3.213904619216919], [1.9024088699370623, 3.2155821323394775], [1.9067721930332482, 3.2173233032226562], [1.911135516129434, 3.2191274166107178], [1.91549883922562, 3.220994472503662], [1.919862162321806, 3.2229256629943848], [1.9242254854179919, 3.2249209880828857], [1.9285888085141778, 3.226978302001953], [1.9329521316103637, 3.22910213470459], [1.9373154547065496, 3.2312886714935303], [1.9416787778027356, 3.2335405349731445], [1.9460421008989215, 3.2358574867248535], [1.9504054239951074, 3.23823881149292], [1.9547687470912933, 3.2406859397888184], [1.9591320701874793, 3.2431981563568115], [1.9634953932836652, 3.2457761764526367], [1.967858716379851, 3.2484207153320312], [1.972222039476037, 3.251129627227783], [1.976585362572223, 3.2539074420928955], [1.9809486856684089, 3.256751298904419], [1.9853120087645948, 3.259662628173828], [1.9896753318607807, 3.2626399993896484], [1.9940386549569666, 3.26568603515625], [1.9984019780531526, 3.2687995433807373], [2.0027653011493385, 3.2719812393188477], [2.0071286242455244, 3.275231122970581], [2.0114919473417103, 3.2785520553588867], [2.0158552704378963, 3.2819406986236572], [2.020218593534082, 3.285398483276367], [2.024581916630268, 3.2889270782470703], [2.028945239726454, 3.2925264835357666], [2.03330856282264, 3.2961952686309814], [2.037671885918826, 3.2999370098114014], [2.042035209015012, 3.3037497997283936], [2.0463985321111977, 3.3076331615448], [2.0507618552073836, 3.311589002609253], [2.0551251783035696, 3.315619945526123], [2.0594885013997555, 3.319720506668091], [2.0638518244959414, 3.3238961696624756], [2.0682151475921273, 3.3281443119049072], [2.0725784706883132, 3.3324689865112305], [2.076941793784499, 3.3368687629699707], [2.081305116880685, 3.341341018676758], [2.085668439976871, 3.3458919525146484], [2.090031763073057, 3.350517511367798], [2.094395086169243, 3.355219602584839], [2.098758409265429, 3.3600013256073], [2.1031217323616147, 3.3648593425750732], [2.1074850554578006, 3.3697962760925293], [2.1118483785539865, 3.3748116493225098], [2.1162117016501725, 3.3799057006835938], [2.1205750247463584, 3.385080337524414], [2.1249383478425443, 3.3903346061706543], [2.1293016709387302, 3.3956708908081055], [2.133664994034916, 3.4010891914367676], [2.138028317131102, 3.4065892696380615], [2.142391640227288, 3.4121720790863037], [2.146754963323474, 3.4178385734558105], [2.15111828641966, 3.423588991165161], [2.1554816095158458, 3.429425001144409], [2.1598449326120317, 3.3985483646392822], [2.1642082557082176, 3.3617115020751953], [2.1685715788044035, 3.325725793838501], [2.1729349019005895, 3.29056453704834], [2.1772982249967754, 3.2562007904052734], [2.1816615480929613, 3.222607374191284], [2.1860248711891472, 3.18976092338562], [2.190388194285333, 3.1576359272003174], [2.194751517381519, 3.126211404800415], [2.199114840477705, 3.095463275909424], [2.203478163573891, 3.065373420715332], [2.207841486670077, 3.0359182357788086], [2.2122048097662628, 3.007082462310791], [2.2165681328624487, 2.9788453578948975], [2.2209314559586346, 2.951188802719116], [2.2252947790548205, 2.924095392227173], [2.2296581021510065, 2.897550106048584], [2.2340214252471924, 2.87153697013855], [2.2383847483433783, 2.8460400104522705], [2.2427480714395642, 2.821044683456421], [2.24711139453575, 2.7965383529663086], [2.251474717631936, 2.7725064754486084], [2.255838040728122, 2.7489356994628906], [2.260201363824308, 2.725813388824463], [2.264564686920494, 2.703129529953003], [2.2689280100166798, 2.6808693408966064], [2.2732913331128657, 2.659022808074951], [2.2776546562090516, 2.6375784873962402], [2.2820179793052375, 2.6165285110473633], [2.2863813024014235, 2.595860719680786], [2.2907446254976094, 2.575563669204712], [2.2951079485937953, 2.555631160736084], [2.2994712716899812, 2.536052703857422], [2.303834594786167, 2.5168190002441406], [2.308197917882353, 2.4979231357574463], [2.312561240978539, 2.4793548583984375], [2.316924564074725, 2.461106300354004], [2.321287887170911, 2.4431731700897217], [2.3256512102670968, 2.4255433082580566], [2.3300145333632827, 2.4082117080688477], [2.3343778564594686, 2.3911712169647217], [2.3387411795556545, 2.3744161128997803], [2.3431045026518404, 2.357938528060913], [2.3474678257480264, 2.3417317867279053], [2.3518311488442123, 2.3257901668548584], [2.356194471940398, 2.3101069927215576], [2.360557795036584, 2.294679641723633], [2.36492111813277, 2.2794981002807617], [2.369284441228956, 2.264559030532837], [2.373647764325142, 2.2498576641082764], [2.378011087421328, 2.235388994216919], [2.3823744105175138, 2.2211456298828125], [2.3867377336136997, 2.207125186920166], [2.3911010567098856, 2.19332218170166], [2.3954643798060715, 2.1797337532043457], [2.3998277029022574, 2.166351079940796], [2.4041910259984434, 2.153172731399536], [2.4085543490946293, 2.14019513130188], [2.412917672190815, 2.127412796020508], [2.417280995287001, 2.1148219108581543], [2.421644318383187, 2.102419853210449], [2.426007641479373, 2.0902011394500732], [2.430370964575559, 2.0781636238098145], [2.434734287671745, 2.066303014755249], [2.4390976107679307, 2.054616928100586], [2.4434609338641167, 2.0430989265441895], [2.4478242569603026, 2.0317487716674805], [2.4521875800564885, 2.0205612182617188], [2.4565509031526744, 2.0095367431640625], [2.4609142262488604, 1.9986666440963745], [2.4652775493450463, 1.9879536628723145], [2.469640872441232, 1.977391242980957], [2.474004195537418, 1.9669784307479858], [2.478367518633604, 1.9567110538482666], [2.48273084172979, 1.9465868473052979], [2.487094164825976, 1.9366044998168945], [2.491457487922162, 1.9267596006393433], [2.4958208110183477, 1.9170515537261963], [2.5001841341145337, 1.9074755907058716], [2.5045474572107196, 1.898032784461975], [2.5089107803069055, 1.888717532157898], [2.5132741034030914, 1.8795288801193237], [2.5176374264992774, 1.8704642057418823], [2.5220007495954633, 1.8615223169326782], [2.526364072691649, 1.8527017831802368], [2.530727395787835, 1.8439981937408447], [2.535090718884021, 1.835410475730896], [2.539454041980207, 1.8269375562667847], [2.543817365076393, 1.8185770511627197], [2.548180688172579, 1.8103270530700684], [2.5525440112687647, 1.8021847009658813], [2.5569073343649507, 1.7940970659255981], [2.5612706574611366, 1.7861685752868652], [2.5656339805573225, 1.77834153175354], [2.5699973036535084, 1.7706184387207031], [2.5743606267496943, 1.7629945278167725], [2.5787239498458803, 1.7554701566696167], [2.583087272942066, 1.7480422258377075], [2.587450596038252, 1.7407087087631226], [2.591813919134438, 1.7334717512130737], [2.596177242230624, 1.7263262271881104], [2.60054056532681, 1.719271183013916], [2.604903888422996, 1.7123067378997803], [2.6092672115191817, 1.705431342124939], [2.6136305346153677, 1.6986422538757324], [2.6179938577115536, 1.6919392347335815], [2.6223571808077395, 1.68532133102417], [2.6267205039039254, 1.6787872314453125], [2.6310838270001113, 1.6723335981369019], [2.6354471500962973, 1.6659626960754395], [2.639810473192483, 1.6596720218658447], [2.644173796288669, 1.653458833694458], [2.648537119384855, 1.647322654724121], [2.652900442481041, 1.6412644386291504], [2.657263765577227, 1.6352804899215698], [2.661627088673413, 1.629372239112854], [2.6659904117695987, 1.6235363483428955], [2.6703537348657846, 1.6177725791931152], [2.6747170579619706, 1.6120810508728027], [2.6790803810581565, 1.6064592599868774], [2.6834437041543424, 1.6009074449539185], [2.6878070272505283, 1.595423698425293], [2.6921703503467143, 1.5900075435638428], [2.6965336734429, 1.5846580266952515], [2.700896996539086, 1.579375147819519], [2.705260319635272, 1.5741561651229858], [2.709623642731458, 1.5690019130706787], [2.713986965827644, 1.5639106035232544], [2.71835028892383, 1.558882236480713], [2.7227136120200157, 1.5539153814315796], [2.7270769351162016, 1.549010157585144], [2.7314402582123876, 1.5441642999649048], [2.7358035813085735, 1.5393775701522827], [2.7401669044047594, 1.534650444984436], [2.7445302275009453, 1.5299806594848633], [2.7488935505971313, 1.5253682136535645], [2.753256873693317, 1.5208125114440918], [2.757620196789503, 1.5163127183914185], [2.761983519885689, 1.5118688344955444], [2.766346842981875, 1.5074790716171265], [2.770710166078061, 1.5031424760818481], [2.775073489174247, 1.4988603591918945], [2.7794368122704327, 1.4946305751800537], [2.7838001353666186, 1.4904520511627197], [2.7881634584628046, 1.4863262176513672], [2.7925267815589905, 1.482250452041626], [2.7968901046551764, 1.4782254695892334], [2.8012534277513623, 1.4742501974105835], [2.8056167508475482, 1.4703242778778076], [2.809980073943734, 1.466447114944458], [2.81434339703992, 1.4626182317733765], [2.818706720136106, 1.4588373899459839], [2.823070043232292, 1.4551023244857788], [2.827433366328478, 1.4514143466949463], [2.831796689424664, 1.4477732181549072], [2.8361600125208497, 1.444177269935608], [2.8405233356170356, 1.440626859664917], [2.8448866587132215, 1.437119960784912], [2.8492499818094075, 1.4336585998535156], [2.8536133049055934, 1.430240511894226], [2.8579766280017793, 1.4268662929534912], [2.8623399510979652, 1.4235347509384155], [2.866703274194151, 1.4202451705932617], [2.871066597290337, 1.4169976711273193], [2.875429920386523, 1.4137930870056152], [2.879793243482709, 1.4106284379959106], [2.884156566578895, 1.4075050354003906], [2.8885198896750808, 1.4044219255447388], [2.8928832127712667, 1.401379942893982], [2.8972465358674526, 1.3983769416809082], [2.9016098589636385, 1.3954132795333862], [2.9059731820598245, 1.3924885988235474], [2.9103365051560104, 1.3896026611328125], [2.9146998282521963, 1.3867545127868652], [2.9190631513483822, 1.3839447498321533], [2.923426474444568, 1.381172776222229], [2.927789797540754, 1.3784375190734863], [2.93215312063694, 1.3757398128509521], [2.936516443733126, 1.3730783462524414], [2.940879766829312, 1.3704540729522705], [2.9452430899254978, 1.3678646087646484], [2.9496064130216837, 1.3653110265731812], [2.9539697361178696, 1.362793207168579], [2.9583330592140555, 1.3603105545043945], [2.9626963823102415, 1.3578624725341797], [2.9670597054064274, 1.3554491996765137], [2.9714230285026133, 1.3530699014663696], [2.9757863515987992, 1.3507245779037476], [2.980149674694985, 1.348413348197937], [2.984512997791171, 1.3461354970932007], [2.988876320887357, 1.3438913822174072], [2.993239643983543, 1.3416794538497925], [2.997602967079729, 1.3395001888275146], [3.0019662901759148, 1.337354063987732], [3.0063296132721007, 1.3352398872375488], [3.0106929363682866, 1.3331581354141235], [3.0150562594644725, 1.3311065435409546], [3.0194195825606585, 1.3290882110595703], [3.0237829056568444, 1.3271008729934692], [3.0281462287530303, 1.3251442909240723], [3.0325095518492162, 1.3232194185256958], [3.036872874945402, 1.321324348449707], [3.041236198041588, 1.3194600343704224], [3.045599521137774, 1.317625880241394], [3.04996284423396, 1.3158226013183594], [3.054326167330146, 1.3140486478805542], [3.0586894904263318, 1.3123042583465576], [3.0630528135225177, 1.3105891942977905], [3.0674161366187036, 1.3089042901992798], [3.0717794597148895, 1.3072477579116821], [3.0761427828110754, 1.3056213855743408], [3.0805061059072614, 1.3040226697921753], [3.0848694290034473, 1.3024533987045288], [3.089232752099633, 1.3009121417999268], [3.093596075195819, 1.299399971961975], [3.097959398292005, 1.297914981842041], [3.102322721388191, 1.2964589595794678], [3.106686044484377, 1.2950297594070435], [3.111049367580563, 1.2936292886734009], [3.1154126906767488, 1.2922561168670654], [3.1197760137729347, 1.290910243988037], [3.1241393368691206, 1.2895909547805786], [3.1285026599653065, 1.2883003950119019], [3.1328659830614924, 1.2870361804962158], [3.1372293061576784, 1.2857990264892578], [3.1415926292538643, 1.28458833694458]]
            
    wall_detector = wall_detection(lidar_data, robotX, robotY, robotTheta)
    walls = wall_detector.detected_walls(False)
    print(walls)